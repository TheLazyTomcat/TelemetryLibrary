var tipuesearch = {"pages": [
     {"title": "TelemetryCommon", "text": "*******************************************************************************        <p><code>TelemetryCommon</code>    <p>©František Milt, all rights reserved.    <p>This file is intended to provide types, constants, routines, etc. used throughout the Telemetry library (that is, in more than one unit).    <p>Last change: 2013-10-04    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-04 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryCommon.html"},
     {"title": "TelemetryCommon.TGameSupportInfo", "text": " ", "tags": "", "loc": "TelemetryCommon.TGameSupportInfo.html"},
     {"title": "TelemetryCommon.TGameSupportInfo.GameID", "text": " ", "tags": "", "loc": "TelemetryCommon.TGameSupportInfo.html#GameID"},
     {"title": "TelemetryCommon.TGameSupportInfo.GameVersion", "text": " ", "tags": "", "loc": "TelemetryCommon.TGameSupportInfo.html#GameVersion"},
     {"title": "TelemetryCommon.scs_value_localized_t", "text": " Because scs_value_t use pointer for some value types (string), it cannot be stored directly, as only reference and no actual data would be stored. ", "tags": "", "loc": "TelemetryCommon.scs_value_localized_t.html"},
     {"title": "TelemetryCommon.scs_value_localized_t.ValueType", "text": " ", "tags": "", "loc": "TelemetryCommon.scs_value_localized_t.html#ValueType"},
     {"title": "TelemetryCommon.scs_value_localized_t.BinaryData", "text": " ", "tags": "", "loc": "TelemetryCommon.scs_value_localized_t.html#BinaryData"},
     {"title": "TelemetryCommon.scs_value_localized_t.StringData", "text": " ", "tags": "", "loc": "TelemetryCommon.scs_value_localized_t.html#StringData"},
     {"title": "TelemetryCommon.cConfigFieldsSeparator", "text": " ", "tags": "", "loc": "TelemetryCommon.html#cConfigFieldsSeparator"},
     {"title": "TelemetryCommon.cEmptySCSValue", "text": " ", "tags": "", "loc": "TelemetryCommon.html#cEmptySCSValue"},
     {"title": "TelemetryCommon.cEmptySCSValueLocalized", "text": " ", "tags": "", "loc": "TelemetryCommon.html#cEmptySCSValueLocalized"},
     {"title": "TelemetryCommon.scs_value_localized", "text": "    Value Value that has to be converted. Converted value. ", "tags": "", "loc": "TelemetryCommon.html#scs_value_localized"},
     {"title": "TelemetryCommon.scs_value", "text": "    Value Value that has to be converted. Converted value. ", "tags": "", "loc": "TelemetryCommon.html#scs_value"},
     {"title": "TelemetryCommon.PGameSupportInfo", "text": " ", "tags": "", "loc": "TelemetryCommon.html#PGameSupportInfo"},
     {"title": "TelemetryCommon.p_scs_value_localized_t", "text": " ", "tags": "", "loc": "TelemetryCommon.html#p_scs_value_localized_t"},
     {"title": "TelemetryInfoProvider", "text": "*******************************************************************************        <p><code>TelemetryInfoProvider</code>    <p>©František Milt, all rights reserved.    <p>This unit contains <a class=\"normal\" href=\"TelemetryInfoProvider.TTelemetryInfoProvider.html\">TTelemetryInfoProvider</a> class (see class declaration for details).    <p>Included files:</p>    <pre class=\"preformatted\">      .\\INC\\TTelemetryInfoProvider.Prepare_Telemetry_1_0.pas</pre>    <p>    <p>Last change: 2013-10-07    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-07 - First stable version.</p></li>  </ul>    <p>    <p>todo:</p>    <ul class=\"paragraph_spacing\">    <li><p>Add capability for loading information from file (text or ini).</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryInfoProvider.html"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider", "text": "    <p>It can be created in two ways, user managed or automatically managed.<br> When created as user managed (using no-paramater constructor), the object is created with empty lists and it is up to the user to fill them (use methods of individual lists to do so).<br> When automatically managed, object is created (using parametrized constructor), the telemetry and game versions are passed to the constructor and it checks whether they are supported or not. If they are, the lists are filled accordingly to them, if they are not supported, the constructor raises an exception.<br>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.fUserManaged", "text": " ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#fUserManaged"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.fKnownEvents", "text": " ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#fKnownEvents"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.fKnownChannels", "text": " ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#fKnownChannels"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.fKnownConfigs", "text": " ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#fKnownConfigs"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.Prepare_Telemetry_1_0", "text": "    ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#Prepare_Telemetry_1_0"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.Prepare_Game_eut2_1_0", "text": "    ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#Prepare_Game_eut2_1_0"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.Prepare_Game_eut2_1_1", "text": "    ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#Prepare_Game_eut2_1_1"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.Prepare_Game_eut2_1_2", "text": "    ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#Prepare_Game_eut2_1_2"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.Prepare_Game_eut2_1_4", "text": "    ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#Prepare_Game_eut2_1_4"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.Create", "text": " Lists of known items are created empty.    ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#Create"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.Create", "text": " Lists of known items are filled automatically in this constructor accordingly to passed telemetry and game versions.<br> If passed telemetry/game versions are not supported then an exception is raised.    <p>    TelemetryVersion Version of telemetry. GameID Game identificator. GameVersion Version of game.  ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#Create"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.Destroy", "text": "    ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#Destroy"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.Clear", "text": " When it is called on automatically managed object, it does nothing.    ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#Clear"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.EventGetName", "text": " not defined by the API) name of passed event.    <p>    <p>  Event Event whose name is requested. Name of given event or an empty string when no such event is known. ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#EventGetName"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.ChannelGetValueType", "text": " </p>    <pre class=\"preformatted\">      Primary   = basic value type      Secondary = second used type (e.g. double for float types, u64 for u32, ...)      Tertiary  = third type (e.g. euler for [f/d]placement)</pre>    <p>    <p>     <p>  Name Name of requested channel. TypePriority Priority of value type that should be returned. Type of value for selected channel and priority. When requested channel is not found, SCS_VALUE_TYPE_invalid is returned. ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#ChannelGetValueType"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.KnownEvents", "text": " ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#KnownEvents"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.KnownChannels", "text": " ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#KnownChannels"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.KnownConfigs", "text": " ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#KnownConfigs"},
     {"title": "TelemetryInfoProvider.TTelemetryInfoProvider.UserManaged", "text": " ", "tags": "", "loc": "TelemetryInfoProvider.TTelemetryInfoProvider.html#UserManaged"},
     {"title": "TelemetryInfoProvider.TChannelValueTypePriority", "text": "  cvtpPrimary    cvtpSecondary    cvtpTertiary   ", "tags": "", "loc": "TelemetryInfoProvider.html#TChannelValueTypePriority"},
     {"title": "TelemetryLists", "text": "*******************************************************************************        <p><code>TelemetryLists</code>    <p>©František Milt, all rights reserved.    <p>Classes in this unit (for details, refer to declaration of individual class): </p>    <pre class=\"preformatted\">    TCustomTelemetryList     |- TKnownEventsList     |- TKnownChannelsList     |- TKnownConfigsList     |- TRegisteredEventsList     |- TRegisteredChannelsList     |- TStoredConfigsList     |- TStoredChannelValuesList  </pre>    <p> Last change: 2013-10-04    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-04 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryLists.html"},
     {"title": "TelemetryLists.TCustomTelemetryList", "text": "    <p><code>TCustomTelemetryList</code> serves as a parent for all other list classes declared in this unit. It wrapps around TList class and adds methods used for easier list management in descendant classes.    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html"},
     {"title": "TelemetryLists.TCustomTelemetryList.fMainList", "text": " It is not publicly visible and is therefore managed automatically. ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#fMainList"},
     {"title": "TelemetryLists.TCustomTelemetryList.fUpdating", "text": " ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#fUpdating"},
     {"title": "TelemetryLists.TCustomTelemetryList.fOnChange", "text": " ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#fOnChange"},
     {"title": "TelemetryLists.TCustomTelemetryList.GetCount", "text": "    ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#GetCount"},
     {"title": "TelemetryLists.TCustomTelemetryList.PtrGetItem", "text": "    <p>    <p>  Index Index of requested item in list. Item at position given by &quot;Index&quot;. ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#PtrGetItem"},
     {"title": "TelemetryLists.TCustomTelemetryList.PtrIndexOf", "text": "    <p>    <p>  Item Item (pointer) whose index is requested. Index of passed item in the list, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#PtrIndexOf"},
     {"title": "TelemetryLists.TCustomTelemetryList.PtrAdd", "text": " Added item can be <code>Nil</code>.<br> Calls method <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#DoChange\">DoChange</a> when addition is successful.    <p>    <p>  Item New item to be added to the list. Index at which the new item was put, -1 when the operation failed. ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#PtrAdd"},
     {"title": "TelemetryLists.TCustomTelemetryList.PtrReplace", "text": " Item can be <code>Nil</code>. When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> - 1&gt;), an exception is raised.<br> Calls method <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#DoChange\">DoChange</a> when item is successfully replaced.    <p>   Index Index of item that has to be replaced. Item New walue of the replaced item.  ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#PtrReplace"},
     {"title": "TelemetryLists.TCustomTelemetryList.PtrInsert", "text": " List <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> is increased by one and all existing items from given position (included) up are moved higher. Item can be <code>Nil</code>. When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a>&gt; - passed index can be higher than current highest index, if so, item is added at the end of the list), and exception is raised.<br> Calls method <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#DoChange\">DoChange</a> when item is successfully inserted.    <p>   Index Index at which the new item should be added. Item Inserted item.  ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#PtrInsert"},
     {"title": "TelemetryLists.TCustomTelemetryList.PtrRemove", "text": " Item should not be, but can be <code>Nil</code>. When given item is not found in list, nothing is removed and the function fails with no error (-1 is returned). If the list contains more than one copy of the removed item, only the first copy is removed.<br> Calls method <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#DoChange\">DoChange</a> when item is successfully removed.    <p>    <p>  Item Item that has to be removed. Index at which the removed item was place before removal, -1 whem given item was not found in the list. ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#PtrRemove"},
     {"title": "TelemetryLists.TCustomTelemetryList.PtrDelete", "text": " When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> - 1&gt;), an exception is raised.<br> Calls method <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#DoChange\">DoChange</a> when item is successfully deleted.    <p>  Index Index of item that has to be deleted.  ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#PtrDelete"},
     {"title": "TelemetryLists.TCustomTelemetryList.Create", "text": "    ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#Create"},
     {"title": "TelemetryLists.TCustomTelemetryList.Destroy", "text": "    <p><b>Note:</b> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is not called.    ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#Destroy"},
     {"title": "TelemetryLists.TCustomTelemetryList.BeginUpdate", "text": "    ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#BeginUpdate"},
     {"title": "TelemetryLists.TCustomTelemetryList.EndUpdate", "text": "    ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#EndUpdate"},
     {"title": "TelemetryLists.TCustomTelemetryList.DoChange", "text": "    ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#DoChange"},
     {"title": "TelemetryLists.TCustomTelemetryList.Clear", "text": " It only deletes stored pointers, allocated memory they are pointing to is not freed. Override this method in descendants to free memory used by items (put inherited code at the end).<br> Calls method <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#DoChange\">DoChange</a> after all items are deleted.    ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#Clear"},
     {"title": "TelemetryLists.TCustomTelemetryList.Count", "text": " ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#Count"},
     {"title": "TelemetryLists.TCustomTelemetryList.OnChange", "text": " It can also be called manually by calling <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#DoChange\">DoChange</a> method. It is NOT called when <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#fUpdating\">fUpdating</a> is set to <code>True</code> (but can be still called directly if handler is assigned). ", "tags": "", "loc": "TelemetryLists.TCustomTelemetryList.html#OnChange"},
     {"title": "TelemetryLists.TKnownEvent", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownEvent.html"},
     {"title": "TelemetryLists.TKnownEvent.Event", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownEvent.html#Event"},
     {"title": "TelemetryLists.TKnownEvent.Name", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownEvent.html#Name"},
     {"title": "TelemetryLists.TKnownEvent.Valid", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownEvent.html#Valid"},
     {"title": "TelemetryLists.TKnownEvent.Utility", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownEvent.html#Utility"},
     {"title": "TelemetryLists.TKnownEventsList", "text": "    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html"},
     {"title": "TelemetryLists.TKnownEventsList.GetKnownEventPointer", "text": "    <p>    <p>  Index Index of requested item. Pointer to requested item. ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#GetKnownEventPointer"},
     {"title": "TelemetryLists.TKnownEventsList.GetKnownEvent", "text": "    <p>    <p>  Index Index of requested item. Requested item. ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#GetKnownEvent"},
     {"title": "TelemetryLists.TKnownEventsList.Clear", "text": "    ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#Clear"},
     {"title": "TelemetryLists.TKnownEventsList.IndexOf", "text": " When the event is not found, -1 is returned.    <p>    <p>  Event Event whose index is requested. Index of requested event, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#IndexOf"},
     {"title": "TelemetryLists.TKnownEventsList.IndexOf", "text": " When event with that name is not found, -1 is returned.    <p>    <p>  Name Name of the event whose index is requested. Index of event with requested name, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#IndexOf"},
     {"title": "TelemetryLists.TKnownEventsList.Add", "text": "    <p>       <p>  Event Event identification number. Name Name of added event. Valid Flag denoting whether added event is marked as valid. Utility Flag denoting whether added event is marked as utility. Index at which the new event was added, -1 when addition failed. ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#Add"},
     {"title": "TelemetryLists.TKnownEventsList.ReplaceIndex", "text": " When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> - 1&gt;), an exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful replacement.    <p>      Index Index of item that has to be replaced. Event Replacement event identification number. Name Name of replacement event. Valid Flag denoting whether replacement event is marked as valid. Utility Flag denoting whether replacement event is marked as utility.  ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#ReplaceIndex"},
     {"title": "TelemetryLists.TKnownEventsList.Replace", "text": " When this old event is not found in the list, nothing happens and the method returns -1.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful replacement.    <p>        <p>  OldEvent Identificatio number of event that has to be replaced. Event Replacement event identification number. Name Name of replacement event. Valid Flag denoting whether replacement event is marked as valid. Utility Flag denoting whether replacement event is marked as utility. Index of event that was replaced, -1 when such event was not found. ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#Replace"},
     {"title": "TelemetryLists.TKnownEventsList.Insert", "text": " <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> is increased by one and all existing items from given position (included) up are moved higher. When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a>&gt; - passed index can be higher than current highest index, if so, item is added at the end of the list), and exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful insertion.    <p>        <p>  Index Position where the new event should be inserted. Event Event identification number. Name Name of event. Valid Flag denoting whether event is marked as valid. Utility Flag denoting whether event is marked as utility. Actual position where the new event was inserted. ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#Insert"},
     {"title": "TelemetryLists.TKnownEventsList.Remove", "text": " When this event is not found in the list, method returns -1 and nothing is removed.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful removal.    <p>    <p>  Event Identification number of event that has to be removed from the list. Index of item that was removed, -1 when requested event was not found. ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#Remove"},
     {"title": "TelemetryLists.TKnownEventsList.Delete", "text": " When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> - 1&gt;), an exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful deletion.    <p>  Index Index of item that has to be deleted.  ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#Delete"},
     {"title": "TelemetryLists.TKnownEventsList.IsValid", "text": "    <p>    <p>  Event Identification number of requested event. Validity of requested event. ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#IsValid"},
     {"title": "TelemetryLists.TKnownEventsList.IsUtility", "text": "    <p>    <p>  Event Identification number of requested event. Utility state of requested event. ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#IsUtility"},
     {"title": "TelemetryLists.TKnownEventsList.Pointers", "text": " Use it for direct access to individual stored items.<br> Unlike <a class=\"normal\" href=\"TelemetryLists.TKnownEventsList.html#Events\">Events</a>[] property, you can use returned pointer to change values of stored items. ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#Pointers"},
     {"title": "TelemetryLists.TKnownEventsList.Events", "text": " Use it to obtain values of individual stored items. ", "tags": "", "loc": "TelemetryLists.TKnownEventsList.html#Events"},
     {"title": "TelemetryLists.TKnownChannel", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownChannel.html"},
     {"title": "TelemetryLists.TKnownChannel.Name", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownChannel.html#Name"},
     {"title": "TelemetryLists.TKnownChannel.ID", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownChannel.html#ID"},
     {"title": "TelemetryLists.TKnownChannel.PrimaryType", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownChannel.html#PrimaryType"},
     {"title": "TelemetryLists.TKnownChannel.SecondaryType", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownChannel.html#SecondaryType"},
     {"title": "TelemetryLists.TKnownChannel.TertiaryType", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownChannel.html#TertiaryType"},
     {"title": "TelemetryLists.TKnownChannel.Indexed", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownChannel.html#Indexed"},
     {"title": "TelemetryLists.TKnownChannel.IndexConfig", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownChannel.html#IndexConfig"},
     {"title": "TelemetryLists.TKnownChannel.IndexConfigID", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownChannel.html#IndexConfigID"},
     {"title": "TelemetryLists.TKnownChannelsList", "text": "    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html"},
     {"title": "TelemetryLists.TKnownChannelsList.GetKnownChannelPointer", "text": "    <p>    <p>  Index Index of requested item. Pointer to requested item. ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#GetKnownChannelPointer"},
     {"title": "TelemetryLists.TKnownChannelsList.GetKnownChannel", "text": "    <p>    <p>  Index Index of requested item. Requested item. ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#GetKnownChannel"},
     {"title": "TelemetryLists.TKnownChannelsList.Clear", "text": "    ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#Clear"},
     {"title": "TelemetryLists.TKnownChannelsList.IndexOf", "text": " When the channel is not found, -1 is returned.    <p>    <p>  Name Name of the requested channel. Index of channel with requested name, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#IndexOf"},
     {"title": "TelemetryLists.TKnownChannelsList.IndexOf", "text": " When channel with that ID is not found, -1 is returned.    <p>    <p>  ID ID of channel whose index is requested. Index of channel with requested ID, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#IndexOf"},
     {"title": "TelemetryLists.TKnownChannelsList.Add", "text": "    <p>         <p>  Name Name of added channel (ID is calculated from it). PrimaryType Primary type of value for this channel. SecondaryType Secondary type of value for this channel. TertiaryType Tertiary type of value for this channel. Indexed Flag denoting whether added channel is indexed. IndexConfig Fully qualified name (id + attribute name) of the configuration containing count for channel indices. Has no meaning when the channel is not indexed. Index at which the new channel was added, -1 when addition failed. ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#Add"},
     {"title": "TelemetryLists.TKnownChannelsList.ReplaceIndex", "text": " When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> - 1&gt;), an exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful replacement.    <p>        Index Index of item that has to be replaced. Name Name of replacement channel (ID is calculated from it). PrimaryType Primary type of value for this channel. SecondaryType Secondary type of value for this channel. TertiaryType Tertiary type of value for this channel. Indexed Flag denoting whether channel is indexed. IndexConfig Fully qualified name (id + attribute name) of the configuration containing count for channel indices. Has no meaning when the channel is not indexed.  ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#ReplaceIndex"},
     {"title": "TelemetryLists.TKnownChannelsList.Replace", "text": " When this channel is not found in the list, nothing happens and the method returns -1.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful replacement.    <p>          <p>  OldEvent Identificatio number of event that has to be replaced. Name Name of replacement channel (ID is calculated from it). PrimaryType Primary type of value for this channel. SecondaryType Secondary type of value for this channel. TertiaryType Tertiary type of value for this channel. Indexed Flag denoting whether channel is indexed. IndexConfig Fully qualified name (id + attribute name) of the configuration containing count for channel indices. Has no meaning when the channel is not indexed. Index of channel that was replaced, -1 when old channel was not found. ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#Replace"},
     {"title": "TelemetryLists.TKnownChannelsList.Insert", "text": " <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> is increased by one and all existing items from given position (included) up are moved higher. When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a>&gt; - passed index can be higher than current highest index, if so, item is added at the end of the list), and exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful insertion.    <p>          <p>  Index Position where the new event should be inserted. Name Name of inserted channel (ID is calculated from it). PrimaryType Primary type of value for this channel. SecondaryType Secondary type of value for this channel. TertiaryType Tertiary type of value for this channel. Indexed Flag denoting whether channel is indexed. IndexConfig Fully qualified name (id + attribute name) of the configuration containing count for channel indices. Has no meaning when the channel is not indexed. Actual position where the new channel was inserted. ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#Insert"},
     {"title": "TelemetryLists.TKnownChannelsList.Remove", "text": " When this channel is not found in the list, method returns -1 and nothing is removed.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful removal.    <p>    <p>  Name Name of the channel that has to be removed from the list. Index of item that was removed, -1 when requested channel was not found. ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#Remove"},
     {"title": "TelemetryLists.TKnownChannelsList.Delete", "text": " When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> - 1&gt;), an exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful deletion.    <p>  Index Index of item that has to be deleted.  ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#Delete"},
     {"title": "TelemetryLists.TKnownChannelsList.ChannelIndexConfigID", "text": " When such channel is not found in the list, ID with value 0x00000000 is returned.    <p>    <p>  Name Name of requested channel. ID of index-configuration for requested channel. ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#ChannelIndexConfigID"},
     {"title": "TelemetryLists.TKnownChannelsList.ChannelNameToID", "text": "    <p>    <p>  Name Name of chanel for which you want an ID. ID of passed channel name. ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#ChannelNameToID"},
     {"title": "TelemetryLists.TKnownChannelsList.ChannelIDToName", "text": " This method actually searches through the list for channel with appropriate ID. When such channel is not found, an empty string is returned.    <p>    <p>  ID ID of requested channel. Name of the channel with appropriate ID. ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#ChannelIDToName"},
     {"title": "TelemetryLists.TKnownChannelsList.Pointers", "text": " Use it for direct access to individual stored items.<br> Unlike <a class=\"normal\" href=\"TelemetryLists.TKnownChannelsList.html#Channels\">Channels</a>[] property, you can use returned pointer to change values of stored items. ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#Pointers"},
     {"title": "TelemetryLists.TKnownChannelsList.Channels", "text": " Use it to obtain values of individual stored items. ", "tags": "", "loc": "TelemetryLists.TKnownChannelsList.html#Channels"},
     {"title": "TelemetryLists.TKnownConfig", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownConfig.html"},
     {"title": "TelemetryLists.TKnownConfig.Name", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownConfig.html#Name"},
     {"title": "TelemetryLists.TKnownConfig.ID", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownConfig.html#ID"},
     {"title": "TelemetryLists.TKnownConfig.ValueType", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownConfig.html#ValueType"},
     {"title": "TelemetryLists.TKnownConfig.Indexed", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownConfig.html#Indexed"},
     {"title": "TelemetryLists.TKnownConfig.Binded", "text": " ", "tags": "", "loc": "TelemetryLists.TKnownConfig.html#Binded"},
     {"title": "TelemetryLists.TKnownConfigsList", "text": "    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html"},
     {"title": "TelemetryLists.TKnownConfigsList.GetKnownConfigPointer", "text": "    <p>    <p>  Index Index of requested item. Pointer to requested item. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#GetKnownConfigPointer"},
     {"title": "TelemetryLists.TKnownConfigsList.GetKnownConfig", "text": "    <p>    <p>  Index Index of requested item. Requested item. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#GetKnownConfig"},
     {"title": "TelemetryLists.TKnownConfigsList.Clear", "text": "    ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#Clear"},
     {"title": "TelemetryLists.TKnownConfigsList.IndexOf", "text": " When the config is not found, -1 is returned.    <p>    <p>  Name Name of the requested config. Index of config with requested name, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#IndexOf"},
     {"title": "TelemetryLists.TKnownConfigsList.IndexOf", "text": " When config with that ID is not found, -1 is returned.    <p>    <p>  ID ID of config whose index is requested. Index of config with requested ID, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#IndexOf"},
     {"title": "TelemetryLists.TKnownConfigsList.Add", "text": "    <p>       <p>  Name Name of added configuration attribute (ID is calculated from it). ValuetyType Type of this configs value. Indexed Flag denoting whether added config is indexed. Binded Flag denoting whether added config is binded by some channel (i.e. some channel has this config as its IndexConfig property). Index at which the new config was added, -1 when addition failed. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#Add"},
     {"title": "TelemetryLists.TKnownConfigsList.ReplaceIndex", "text": " When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> - 1&gt;), an exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful replacement.    <p>      Index Index of item that has to be replaced. Name Name of added configuration attribute (ID is calculated from it). ValuetyType Type of this configs value. Indexed Flag denoting whether added config is indexed. Binded Flag denoting whether added config is binded by some channel (i.e. some channel has this config as its IndexConfig property).  ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#ReplaceIndex"},
     {"title": "TelemetryLists.TKnownConfigsList.Replace", "text": " When this config is not found in the list, nothing happens and the method returns -1.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful replacement.    <p>        <p>  OldConfig Name of the config that has to be replaced. Name Name of replacement configuration attribute (ID is calculated from it). ValuetyType Type of this configs value. Indexed Flag denoting whether config is indexed. Binded Flag denoting whether config is binded by some channel (i.e. some channel has this config as its IndexConfig property). Index of config that was replaced, -1 when old config was not found. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#Replace"},
     {"title": "TelemetryLists.TKnownConfigsList.Insert", "text": " <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> is increased by one and all existing items from given position (included) up are moved higher. When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a>&gt; - passed index can be higher than current highest index, if so, item is added at the end of the list), and exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful insertion.    <p>        <p>  Index Position where the new config should be inserted. Name Name of inserted configuration attribute (ID is calculated from it). ValuetyType Type of this configs value. Indexed Flag denoting whether config is indexed. Binded Flag denoting whether config is binded by some channel (i.e. some channel has this config as its IndexConfig property). Actual position where the new config was inserted. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#Insert"},
     {"title": "TelemetryLists.TKnownConfigsList.Remove", "text": " When this config is not found in the list, method returns -1 and nothing is removed.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful removal.    <p>    <p>  Name Name of the config that has to be removed from the list. Index of item that was removed, -1 when requested config was not found. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#Remove"},
     {"title": "TelemetryLists.TKnownConfigsList.Delete", "text": " When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> - 1&gt;), an exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful deletion.    <p>  Index Index of item that has to be deleted.  ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#Delete"},
     {"title": "TelemetryLists.TKnownConfigsList.IsBinded", "text": "    <p>    <p>  Name Name of the requested config. Binded state of requested config. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#IsBinded"},
     {"title": "TelemetryLists.TKnownConfigsList.IsIndexed", "text": "    <p>    <p>  Name Name of the requested config. Indexed state of requested config. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#IsIndexed"},
     {"title": "TelemetryLists.TKnownConfigsList.ConfigNameToID", "text": "    <p>    <p>  Name Name of Config for which you want an ID. ID of passed Config name. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#ConfigNameToID"},
     {"title": "TelemetryLists.TKnownConfigsList.ConfigIDToName", "text": " This method actually searches through the list for Config with appropriate ID. When such Config is not found, an empty string is returned.    <p>    <p>  ID ID of requested config. Name of the config with appropriate ID. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#ConfigIDToName"},
     {"title": "TelemetryLists.TKnownConfigsList.Pointers", "text": " Use it for direct access to individual stored items.<br> Unlike <a class=\"normal\" href=\"TelemetryLists.TKnownConfigsList.html#Configs\">Configs</a>[] property, you can use returned pointer to change values of stored items. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#Pointers"},
     {"title": "TelemetryLists.TKnownConfigsList.Configs", "text": " Use it to obtain values of individual stored items. ", "tags": "", "loc": "TelemetryLists.TKnownConfigsList.html#Configs"},
     {"title": "TelemetryLists.TEventInfo", "text": " ", "tags": "", "loc": "TelemetryLists.TEventInfo.html"},
     {"title": "TelemetryLists.TEventInfo.Event", "text": " ", "tags": "", "loc": "TelemetryLists.TEventInfo.html#Event"},
     {"title": "TelemetryLists.TEventInfo.Utility", "text": " ", "tags": "", "loc": "TelemetryLists.TEventInfo.html#Utility"},
     {"title": "TelemetryLists.TEventContext", "text": " Pointer to this structure is passed as context in telemetry API calls when registering telemetry event. ", "tags": "", "loc": "TelemetryLists.TEventContext.html"},
     {"title": "TelemetryLists.TEventContext.Recipient", "text": " ", "tags": "", "loc": "TelemetryLists.TEventContext.html#Recipient"},
     {"title": "TelemetryLists.TEventContext.EventInfo", "text": " ", "tags": "", "loc": "TelemetryLists.TEventContext.html#EventInfo"},
     {"title": "TelemetryLists.TRegisteredEventsList", "text": "    <p>When new event is registered in the telemetry API, it is registered with context which is actually pointer to a variable of <a class=\"normal\" href=\"TelemetryLists.TEventContext.html\">TEventContext</a> structure. This variable is at the same time added as a new item into this list.<br> When event is unregistered, context it is bound to is removed from this list.    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html"},
     {"title": "TelemetryLists.TRegisteredEventsList.GetEventContext", "text": "    <p>    <p>  Index Index of requested item. Pointer to requested item. ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#GetEventContext"},
     {"title": "TelemetryLists.TRegisteredEventsList.GetEventInfo", "text": "    <p>    <p>  Index Index of requested item. Requested item. ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#GetEventInfo"},
     {"title": "TelemetryLists.TRegisteredEventsList.Clear", "text": "    ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#Clear"},
     {"title": "TelemetryLists.TRegisteredEventsList.IndexOf", "text": " When the context is not found, -1 is returned.    <p>    <p>  Event Identification number of requested event. Index of context with requested event, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#IndexOf"},
     {"title": "TelemetryLists.TRegisteredEventsList.IndexOf", "text": " When the context is not found, -1 is returned.    <p>    <p>  EventContext Requested event context. Index of requested context, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#IndexOf"},
     {"title": "TelemetryLists.TRegisteredEventsList.Add", "text": " &quot;EventContext&quot; parameter must not be <code>Nil</code>, otherwise an exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful addition.    <p>    <p>  EventContext Pointer to event context that has to be added to the list. Index at which the new context was added, -1 when addition failed. ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#Add"},
     {"title": "TelemetryLists.TRegisteredEventsList.Add", "text": "    <p>      <p>  Recipient Telemetry recipient registering this new context. Event Identification number of registered event. Utility Flag indicating whether registered event is marked as utility. Index at which the new context was added, -1 when addition failed. ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#Add"},
     {"title": "TelemetryLists.TRegisteredEventsList.Add", "text": " Created context has &quot;Recipient&quot; field set to <code>Nil</code>.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful addition.    <p>     <p>  Event Identification number of registered event. Utility Flag indicating whether registered event is marked as utility. Index at which the new context was added, -1 when addition failed. ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#Add"},
     {"title": "TelemetryLists.TRegisteredEventsList.Remove", "text": "    <p>    <p>  Event Identification number of registered event whose context has to be removed. Index of item that was removed, -1 when context with requested event was not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#Remove"},
     {"title": "TelemetryLists.TRegisteredEventsList.Remove", "text": "    <p>    <p>  EventContext Context to be removed. Index of item that was removed, -1 when requested context was not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#Remove"},
     {"title": "TelemetryLists.TRegisteredEventsList.Delete", "text": " When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> - 1&gt;), an exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful deletion.    <p>  Index Index of item that has to be deleted.  ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#Delete"},
     {"title": "TelemetryLists.TRegisteredEventsList.CreateContext", "text": " It is used when registering new telemetry event, because actual context is needed for this registration, but cannot be added to this list before the registration is complete.<br> Sequence of actions taken during registration is as follows: </p>    <ul class=\"compact_spacing\">    <li><p>Context is created using this function.</p></li>    <li><p>Registration in API is attempted.</p></li>    <li><p>When successful, context is added to this list.</p></li>    <li><p>When unsuccessful, context is freed using <a class=\"normal\" href=\"TelemetryLists.TRegisteredEventsList.html#FreeContext\">FreeContext</a> method.</p></li>  </ul>    <p>    <p>      <p>  Recipient Telemetry recipient registering created context. Event Identification number of registered event. Utility Flag indicating whether registered event is marked as utility. Pointer to created event context. ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#CreateContext"},
     {"title": "TelemetryLists.TRegisteredEventsList.FreeContext", "text": "    <p>  EventContext Pointer to event context to be freed.  ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#FreeContext"},
     {"title": "TelemetryLists.TRegisteredEventsList.Contexts", "text": " Use it for direct access to individual stored <code>contexts</code>.<br> Unlike <a class=\"normal\" href=\"TelemetryLists.TRegisteredEventsList.html#Events\">Events</a>[] property, you can use returned pointer to change values of stored items. ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#Contexts"},
     {"title": "TelemetryLists.TRegisteredEventsList.Events", "text": " Use it to obtain values of individual stored items.<br> This property does not return whole context structure, only its &quot;EventInfo&quot; field. ", "tags": "", "loc": "TelemetryLists.TRegisteredEventsList.html#Events"},
     {"title": "TelemetryLists.TChannelInfo", "text": " ", "tags": "", "loc": "TelemetryLists.TChannelInfo.html"},
     {"title": "TelemetryLists.TChannelInfo.Name", "text": " ", "tags": "", "loc": "TelemetryLists.TChannelInfo.html#Name"},
     {"title": "TelemetryLists.TChannelInfo.ID", "text": " ", "tags": "", "loc": "TelemetryLists.TChannelInfo.html#ID"},
     {"title": "TelemetryLists.TChannelInfo.Index", "text": " ", "tags": "", "loc": "TelemetryLists.TChannelInfo.html#Index"},
     {"title": "TelemetryLists.TChannelInfo.ValueType", "text": " ", "tags": "", "loc": "TelemetryLists.TChannelInfo.html#ValueType"},
     {"title": "TelemetryLists.TChannelInfo.Flags", "text": " ", "tags": "", "loc": "TelemetryLists.TChannelInfo.html#Flags"},
     {"title": "TelemetryLists.TChannelInfo.IndexConfigID", "text": " ", "tags": "", "loc": "TelemetryLists.TChannelInfo.html#IndexConfigID"},
     {"title": "TelemetryLists.TChannelContext", "text": " Pointer to this structure is passed as context in telemetry API calls when registering telemetry channel. ", "tags": "", "loc": "TelemetryLists.TChannelContext.html"},
     {"title": "TelemetryLists.TChannelContext.Recipient", "text": " ", "tags": "", "loc": "TelemetryLists.TChannelContext.html#Recipient"},
     {"title": "TelemetryLists.TChannelContext.ChannelInfo", "text": " ", "tags": "", "loc": "TelemetryLists.TChannelContext.html#ChannelInfo"},
     {"title": "TelemetryLists.TRegisteredChannelsList", "text": "    <p>When new channel is registered in the telemetry API, it is registered with context which is actually pointer to a variable of <a class=\"normal\" href=\"TelemetryLists.TChannelContext.html\">TChannelContext</a> structure. This variable is at the same time added as a new item into this list.<br> When channel is unregistered, context it is bound to is removed from this list.    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html"},
     {"title": "TelemetryLists.TRegisteredChannelsList.GetChannelContext", "text": "    <p>    <p>  Index Index of requested item. Pointer to requested item. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#GetChannelContext"},
     {"title": "TelemetryLists.TRegisteredChannelsList.GetChannelInfo", "text": "    <p>    <p>  Index Index of requested item. Requested item. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#GetChannelInfo"},
     {"title": "TelemetryLists.TRegisteredChannelsList.Clear", "text": "    ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#Clear"},
     {"title": "TelemetryLists.TRegisteredChannelsList.IndexOf", "text": " When the context is not found, -1 is returned.    <p>     <p>  Name Name of the requested channel. Index Index of the requested channel. Index of context with requested channel, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#IndexOf"},
     {"title": "TelemetryLists.TRegisteredChannelsList.IndexOf", "text": " When the context is not found, -1 is returned.    <p>     <p>  ID ID of the requested channel. Index Index of the requested channel. Index of context with requested channel, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#IndexOf"},
     {"title": "TelemetryLists.TRegisteredChannelsList.IndexOf", "text": " When the context is not found, -1 is returned.    <p>      <p>  Name Name of the requested channel. Index Index of the requested channel. ValueType Type of value of the requested channel. Index of context with requested channel, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#IndexOf"},
     {"title": "TelemetryLists.TRegisteredChannelsList.IndexOf", "text": " When the context is not found, -1 is returned.    <p>      <p>  ID ID of the requested channel. Index Index of the requested channel. ValueType Type of value of the requested channel. Index of context with requested channel, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#IndexOf"},
     {"title": "TelemetryLists.TRegisteredChannelsList.IndexOf", "text": " When the context is not found, -1 is returned.    <p>       <p>  Name Name of the requested channel. Index Index of the requested channel. ValueType Type of value of the requested channel. Flags Registering flags of the requested channel. Index of context with requested channel, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#IndexOf"},
     {"title": "TelemetryLists.TRegisteredChannelsList.IndexOf", "text": " When the context is not found, -1 is returned.    <p>       <p>  ID ID of the requested channel. Index Index of the requested channel. ValueType Type of value of the requested channel. Flags Registering flags of the requested channel. Index of context with requested channel, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#IndexOf"},
     {"title": "TelemetryLists.TRegisteredChannelsList.IndexOf", "text": " When the context is not found, -1 is returned.    <p>    <p>  ChannelContext Requested channel context. Index of requested context, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#IndexOf"},
     {"title": "TelemetryLists.TRegisteredChannelsList.Add", "text": " &quot;ChannelContext&quot; parameter must not be <code>Nil</code>, otherwise an exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful addition.    <p>    <p>  ChannelContext Pointer to channel context that has to be added to the list. Index at which the new context was added, -1 when addition failed. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#Add"},
     {"title": "TelemetryLists.TRegisteredChannelsList.Add", "text": "    <p>         <p>  Recipient Telemetry recipient registering this new context. Name Name of the registered channel (ID is calculated from it). Index Index of registered channel. ValueType Value type of registered channel. Flags Registering flags. IndexConfigID ID of index configuration to which the registered channel is bound. Index at which the new context was added, -1 when addition failed. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#Add"},
     {"title": "TelemetryLists.TRegisteredChannelsList.Add", "text": " Created context has &quot;Recipient&quot; field set to <code>Nil</code>.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful addition.    <p>        <p>  Name Name of the registered channel (ID is calculated from it). Index Index of registered channel. ValueType Value type of registered channel. Flags Registering flags. IndexConfigID ID of index configuration to which the registered channel is bound. Index at which the new context was added, -1 when addition failed. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#Add"},
     {"title": "TelemetryLists.TRegisteredChannelsList.Remove", "text": "    <p>      <p>  Name Name of the registered channel whose context has to be removed. Index Index of registered channel. ValueType Value type of registered channel. Index of item that was removed, -1 when context with requested channel was not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#Remove"},
     {"title": "TelemetryLists.TRegisteredChannelsList.Remove", "text": "    <p>      <p>  ID ID of the registered channel whose context has to be removed. Index Index of registered channel. ValueType Value type of registered channel. Index of item that was removed, -1 when context with requested channel was not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#Remove"},
     {"title": "TelemetryLists.TRegisteredChannelsList.Remove", "text": "    <p>    <p>  ChannelContext Context to be removed. Index of item that was removed, -1 when requested context was not found. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#Remove"},
     {"title": "TelemetryLists.TRegisteredChannelsList.Delete", "text": " When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> - 1&gt;), an exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful deletion.    <p>  Index Index of item that has to be deleted.  ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#Delete"},
     {"title": "TelemetryLists.TRegisteredChannelsList.CreateContext", "text": " It is used when registering new telemetry channel, because actual context is needed for this registration, but cannot be added to this list before the registration is complete.<br> Sequence of actions taken during registration is as follows: </p>    <ul class=\"compact_spacing\">    <li><p>Context is created using this function.</p></li>    <li><p>Registration in API is attempted.</p></li>    <li><p>When successful, context is added to this list.</p></li>    <li><p>When unsuccessful, context is freed using <a class=\"normal\" href=\"TelemetryLists.TRegisteredChannelsList.html#FreeContext\">FreeContext</a> method.</p></li>  </ul>    <p>    <p>         <p>  Recipient Telemetry recipient registering created context. Name Name of the registered channel (ID is calculated from it). Index Index of registered channel. ValueType Value type of registered channel. Flags Registering flags. IndexConfigID ID of index configuration to which registered channel is bound. Pointer to created channel context. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#CreateContext"},
     {"title": "TelemetryLists.TRegisteredChannelsList.FreeContext", "text": "    <p>  ChannelContext Pointer to channel context to be freed.  ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#FreeContext"},
     {"title": "TelemetryLists.TRegisteredChannelsList.Contexts", "text": " Use it for direct access to individual stored <code>contexts</code>.<br> Unlike <a class=\"normal\" href=\"TelemetryLists.TRegisteredChannelsList.html#Channels\">Channels</a>[] property, you can use returned pointer to change values of stored items. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#Contexts"},
     {"title": "TelemetryLists.TRegisteredChannelsList.Channels", "text": " Use it to obtain values of individual stored items.<br> This property does not return whole context structure, only its &quot;ChannelInfo&quot; field. ", "tags": "", "loc": "TelemetryLists.TRegisteredChannelsList.html#Channels"},
     {"title": "TelemetryLists.TStoredConfig", "text": " This structure is used to store configuration value obtained from the API call. ", "tags": "", "loc": "TelemetryLists.TStoredConfig.html"},
     {"title": "TelemetryLists.TStoredConfig.Name", "text": " ", "tags": "", "loc": "TelemetryLists.TStoredConfig.html#Name"},
     {"title": "TelemetryLists.TStoredConfig.ID", "text": " ", "tags": "", "loc": "TelemetryLists.TStoredConfig.html#ID"},
     {"title": "TelemetryLists.TStoredConfig.Index", "text": " ", "tags": "", "loc": "TelemetryLists.TStoredConfig.html#Index"},
     {"title": "TelemetryLists.TStoredConfig.Value", "text": " ", "tags": "", "loc": "TelemetryLists.TStoredConfig.html#Value"},
     {"title": "TelemetryLists.TStoredConfig.Binded", "text": " ", "tags": "", "loc": "TelemetryLists.TStoredConfig.html#Binded"},
     {"title": "TelemetryLists.TStoredConfigsList", "text": "    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html"},
     {"title": "TelemetryLists.TStoredConfigsList.GetStoredConfigPointer", "text": "    <p>    <p>  Index Index of requested item. Pointer to requested item. ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#GetStoredConfigPointer"},
     {"title": "TelemetryLists.TStoredConfigsList.GetStoredConfig", "text": "    <p>    <p>  Index Index of requested item. Requested item. ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#GetStoredConfig"},
     {"title": "TelemetryLists.TStoredConfigsList.Clear", "text": "    ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#Clear"},
     {"title": "TelemetryLists.TStoredConfigsList.IndexOf", "text": " When matching config is not found, -1 is returned.    <p>     <p>  Name Name of the requested config. Index Index of the requested config. Index of requested config, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#IndexOf"},
     {"title": "TelemetryLists.TStoredConfigsList.IndexOf", "text": " When matching config is not found, -1 is returned.    <p>     <p>  ID ID of the requested config. Index Index of the requested config. Index of requested config, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#IndexOf"},
     {"title": "TelemetryLists.TStoredConfigsList.Add", "text": "    <p>       <p>  Name Name of stored config (ID is calculated from it). Index Index of stored config. Value Localized value (data) this config contains. Binded Flag denoting whether this config is binded by some channel (i.e. some channel has this config as its IndexConfig property). Index at which the new config was stored, -1 when addition failed. ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#Add"},
     {"title": "TelemetryLists.TStoredConfigsList.Add", "text": "    <p>       <p>  Name Name of stored config (ID is calculated from it). Index Index of stored config. Value Value (data) this config contains. Binded Flag denoting whether this config is binded by some channel (i.e. some channel has this config as its IndexConfig property). Index at which the new config was stored, -1 when addition failed. ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#Add"},
     {"title": "TelemetryLists.TStoredConfigsList.Remove", "text": "    <p>     <p>  Name Name of stored config that has to be removed. Index Index of stored config. Index of item that was removed, -1 when requested config was not found. ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#Remove"},
     {"title": "TelemetryLists.TStoredConfigsList.Remove", "text": "    <p>     <p>  ID ID of stored config that has to be removed. Index Index of stored config. Index of item that was removed, -1 when requested config was not found. ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#Remove"},
     {"title": "TelemetryLists.TStoredConfigsList.Delete", "text": " When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> - 1&gt;), an exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful deletion.    <p>  Index Index of item that has to be deleted.  ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#Delete"},
     {"title": "TelemetryLists.TStoredConfigsList.ChangeConfigValue", "text": " <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful removal.    <p>     <p>  Name Name of stored config whose value should be changed. Index Index of stored config. Index of item whose value has been changed, -1 when requested config was not found. ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#ChangeConfigValue"},
     {"title": "TelemetryLists.TStoredConfigsList.ChangeConfigValue", "text": " <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful removal.    <p>     <p>  ID ID of stored config whose value should be changed. Index Index of stored config. Index of item whose value has been changed, -1 when requested config was not found. ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#ChangeConfigValue"},
     {"title": "TelemetryLists.TStoredConfigsList.Pointers", "text": " Use it for direct access to individual stored items.<br> Unlike <a class=\"normal\" href=\"TelemetryLists.TStoredConfigsList.html#Configs\">Configs</a>[] property, you can use returned pointer to change values of stored items. ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#Pointers"},
     {"title": "TelemetryLists.TStoredConfigsList.Configs", "text": " Use it to obtain values of individual stored items. ", "tags": "", "loc": "TelemetryLists.TStoredConfigsList.html#Configs"},
     {"title": "TelemetryLists.TStoredChannel", "text": " This structure is used to store channel value obtained from API calls. ", "tags": "", "loc": "TelemetryLists.TStoredChannel.html"},
     {"title": "TelemetryLists.TStoredChannel.MasterID", "text": " ", "tags": "", "loc": "TelemetryLists.TStoredChannel.html#MasterID"},
     {"title": "TelemetryLists.TStoredChannel.Name", "text": " ", "tags": "", "loc": "TelemetryLists.TStoredChannel.html#Name"},
     {"title": "TelemetryLists.TStoredChannel.ID", "text": " ", "tags": "", "loc": "TelemetryLists.TStoredChannel.html#ID"},
     {"title": "TelemetryLists.TStoredChannel.Index", "text": " ", "tags": "", "loc": "TelemetryLists.TStoredChannel.html#Index"},
     {"title": "TelemetryLists.TStoredChannel.ValueType", "text": " ", "tags": "", "loc": "TelemetryLists.TStoredChannel.html#ValueType"},
     {"title": "TelemetryLists.TStoredChannel.Value", "text": " ", "tags": "", "loc": "TelemetryLists.TStoredChannel.html#Value"},
     {"title": "TelemetryLists.TStoredChannelValuesList", "text": "    <p>Items in this list are sorted by their MasterID.    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryLists.TStoredChannelValuesList.html"},
     {"title": "TelemetryLists.TStoredChannelValuesList.GetStoredChannelValue", "text": "    <p>    <p>  Index Index of requested item. Requested item. ", "tags": "", "loc": "TelemetryLists.TStoredChannelValuesList.html#GetStoredChannelValue"},
     {"title": "TelemetryLists.TStoredChannelValuesList.GetInsertIndex", "text": "    <p>    <p>  MasterID Master ID of added item. Position at which newly added item should be inserted. ", "tags": "", "loc": "TelemetryLists.TStoredChannelValuesList.html#GetInsertIndex"},
     {"title": "TelemetryLists.TStoredChannelValuesList.Clear", "text": "    ", "tags": "", "loc": "TelemetryLists.TStoredChannelValuesList.html#Clear"},
     {"title": "TelemetryLists.TStoredChannelValuesList.IndexOf", "text": " When matching config is not found, -1 is returned.    <p>    <p>  MasterID Master ID of requested channel. Index of requested channel, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TStoredChannelValuesList.html#IndexOf"},
     {"title": "TelemetryLists.TStoredChannelValuesList.IndexOf", "text": " When the context is not found, -1 is returned.    <p>      <p>  ID ID of the requested channel. Index Index of the requested channel. ValueType Type of value of the requested channel. Index of context with requested channel, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TStoredChannelValuesList.html#IndexOf"},
     {"title": "TelemetryLists.TStoredChannelValuesList.IndexOf", "text": " When the context is not found, -1 is returned.    <p>      <p>  Name Name of the requested channel. Index Index of the requested channel. ValueType Type of value of the requested channel. Index of context with requested channel, -1 when not found. ", "tags": "", "loc": "TelemetryLists.TStoredChannelValuesList.html#IndexOf"},
     {"title": "TelemetryLists.TStoredChannelValuesList.StoreChannelValue", "text": " If such channel is not yet stored in the list, it is added as new item. Function can, in extreme cases, return -1 (when the channel is not already stored and addition fails for some reason).<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful addition or value change.    <p>       <p>  Name Name of requested channel. ID ID of requested channel. Index Index of requested channel. Value Value of the channel. Index of requested channel, -1 on failure. ", "tags": "", "loc": "TelemetryLists.TStoredChannelValuesList.html#StoreChannelValue"},
     {"title": "TelemetryLists.TStoredChannelValuesList.StoredChannelValues", "text": " Use it to obtain values of individual stored items. ", "tags": "", "loc": "TelemetryLists.TStoredChannelValuesList.html#StoredChannelValues"},
     {"title": "TelemetryLists.GetItemID", "text": " At the moment, identificators are implemented as CRC32 checksum of ansi version of given string.    Item Item name. Item identificator. ", "tags": "", "loc": "TelemetryLists.html#GetItemID"},
     {"title": "TelemetryLists.GetMasterID", "text": "<br> This number is used in searching and sorting algorithms and is calculated from channel ID, Index and ValueType.<br> At the moment, it is calculated by the formula:<br> </p>    <pre class=\"longcode\">MasterID := (ID <span class=\"pascal_keyword\">xor</span> <span class=\"pascal_keyword\">Index</span>) <span class=\"pascal_keyword\">xor</span> <span class=\"pascal_keyword\">not</span> ValueType;</pre>    <p>      ID Channel ID. Index Channel index. ValueType Channel ValueType. Master identification number. ", "tags": "", "loc": "TelemetryLists.html#GetMasterID"},
     {"title": "TelemetryLists.TItemID", "text": " All other identificators (except for <a class=\"normal\" href=\"TelemetryLists.html#TMasterID\">TMasterID</a>) are of this type. ", "tags": "", "loc": "TelemetryLists.html#TItemID"},
     {"title": "TelemetryLists.PItemID", "text": " ", "tags": "", "loc": "TelemetryLists.html#PItemID"},
     {"title": "TelemetryLists.PKnownEvent", "text": " ", "tags": "", "loc": "TelemetryLists.html#PKnownEvent"},
     {"title": "TelemetryLists.TChannelID", "text": " ", "tags": "", "loc": "TelemetryLists.html#TChannelID"},
     {"title": "TelemetryLists.PChannelID", "text": " ", "tags": "", "loc": "TelemetryLists.html#PChannelID"},
     {"title": "TelemetryLists.PKnownChannel", "text": " ", "tags": "", "loc": "TelemetryLists.html#PKnownChannel"},
     {"title": "TelemetryLists.TConfigID", "text": " ", "tags": "", "loc": "TelemetryLists.html#TConfigID"},
     {"title": "TelemetryLists.PConfigID", "text": " ", "tags": "", "loc": "TelemetryLists.html#PConfigID"},
     {"title": "TelemetryLists.PKnownConfig", "text": " ", "tags": "", "loc": "TelemetryLists.html#PKnownConfig"},
     {"title": "TelemetryLists.PEventInfo", "text": " ", "tags": "", "loc": "TelemetryLists.html#PEventInfo"},
     {"title": "TelemetryLists.PEventContext", "text": " ", "tags": "", "loc": "TelemetryLists.html#PEventContext"},
     {"title": "TelemetryLists.PChannelInfo", "text": " ", "tags": "", "loc": "TelemetryLists.html#PChannelInfo"},
     {"title": "TelemetryLists.PChannelContext", "text": " ", "tags": "", "loc": "TelemetryLists.html#PChannelContext"},
     {"title": "TelemetryLists.PStoredConfig", "text": " ", "tags": "", "loc": "TelemetryLists.html#PStoredConfig"},
     {"title": "TelemetryLists.TMasterID", "text": " ", "tags": "", "loc": "TelemetryLists.html#TMasterID"},
     {"title": "TelemetryLists.PStoredChannel", "text": " ", "tags": "", "loc": "TelemetryLists.html#PStoredChannel"},
     {"title": "TelemetryNetCircularBuffers", "text": "*******************************************************************************        <p><code>TelemetryNetCircularBuffers</code>    <p>©František Milt, all rights reserved.    <p>Classes in this unit (for details, refer to declaration of individual class): </p>    <pre class=\"preformatted\">    TCircularItemsBuffer     |- TCircularPacketsBuffer     |- TCircularChannelsBuffer     |- TDefferedOperationsBuffer  </pre>    <p> Last change: 2013-10-10    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-10 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryNetCircularBuffers.html"},
     {"title": "TelemetryNetCircularBuffers.TArrayItem", "text": " Field <a class=\"normal\" href=\"TelemetryNetCircularBuffers.TArrayItem.html#Data\">Data</a> contains actual item payload. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TArrayItem.html"},
     {"title": "TelemetryNetCircularBuffers.TArrayItem.Filled", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TArrayItem.html#Filled"},
     {"title": "TelemetryNetCircularBuffers.TArrayItem.Data", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TArrayItem.html#Data"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer", "text": " It is implemented as one way circular buffer, meaning it is created with fixed size, and is used where there is need for buffer that prevents uncontrolled growth of memory use. When the buffer becames full, newly added items simply overwrites the oldest ones (they are dropped).<br> Buffer internally uses <a class=\"normal\" href=\"TelemetryNetCircularBuffers.TArrayItem.html\">TArrayItem</a> structures to store individual buffered items, but only field &quot;Data&quot; of this structure can be accessed by user. So when adding, peeking, removing, etc. any item, only this pointer is accessed, everything else is managed automatically.    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.fMainArray", "text": " Its size is initialized during creation and cannot be changed. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#fMainArray"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.fItemsDropped", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#fItemsDropped"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.fCurrentPosition", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#fCurrentPosition"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.fOldestPosition", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#fOldestPosition"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.fOnItemDrop", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#fOnItemDrop"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.fOnItemAdd", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#fOnItemAdd"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.fOnItemRemove", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#fOnItemRemove"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.GetSize", "text": "    <p>   Size of the buffer. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#GetSize"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.GetCount", "text": "    <p>   Number of filled array items. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#GetCount"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.DropItem", "text": "    <p>  Index Index of item that has to be dropped.  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#DropItem"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.InitializeItem", "text": " It is called on object creation for each item in internal array.    <p>  Item Item to be initialized.  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#InitializeItem"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.IndexInc", "text": " when the value exceeds maximum, it is set to minimum) on &quot;Index&quot; parameter.    <p>  Index Value to be processed.  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#IndexInc"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.IndexSucc", "text": " As this array should behave as one-way circular buffer, the next value after maximum is mininum.    <p>    <p>  Index Actual index from whom next index should be returned. Next index after value given in &quot;Index&quot; parameter. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#IndexSucc"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.Create", "text": " If &quot;aSize&quot; is smaller than 1, then buffer of <a class=\"normal\" href=\"TelemetryNetCircularBuffers.TCircularItemsBuffer.html#Size\">size</a> 1 is created.    <p>  aSize Requiered size of created buffer.  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#Create"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.Destroy", "text": "    ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#Destroy"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.Clear", "text": "    ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#Clear"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.AddItem", "text": "    <p>  Item Pointer that should be added to buffer. Must not be <code>Nil</code>.  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#AddItem"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.PeekItem", "text": "    <p>   Oldest stored pointer. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#PeekItem"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.RemoveItem", "text": "    <p> when buffer contains no item).   <code>True</code> when item was succesfully removed, otherwise <code>False</code> (e.g. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#RemoveItem"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.ContainsItem", "text": "    <p>   <code>True</code> when the buffer contains at least one item, othrewise <code>False</code>. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#ContainsItem"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.IsFull", "text": "    <p>   <code>True</code> when buffer is considered full, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#IsFull"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.IsEmpty", "text": "    <p>   <code>True</code> when buffer is considered empty, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#IsEmpty"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.Size", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#Size"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.Count", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#Count"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.ItemsDropped", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#ItemsDropped"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.OnItemDrop", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#OnItemDrop"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.OnItemAdd", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#OnItemAdd"},
     {"title": "TelemetryNetCircularBuffers.TCircularItemsBuffer.OnItemRemove", "text": " As descendant will propably free item's memory before this event can be caled, it is recommended to handle calls to this event manually or replace it with different event. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularItemsBuffer.html#OnItemRemove"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer", "text": " Server-client communication is realized trought variable size packets, when one has to be send, it is passed to connection socket. But these sockets use their own internal buffers, and when this socket buffer is full, the socket rejects to accept the packet. So the packet must be stored and sent a little later. <code>TCircularPacketsBuffer</code> is designed for this purpose.<br> When a packet is rejected, it is passed to this buffer and stored. Later, when the socket is ready to send more data, stored packet is loaded and sent.    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.fSocket", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#fSocket"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.fOnPacketDrop", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#fOnPacketDrop"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.GetItemsDropped", "text": "    <p>   Number of dropped items since creation of instance. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#GetItemsDropped"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.DropItem", "text": "    <p>See <a class=\"normal\" href=\"TelemetryNetCircularBuffers.TCircularItemsBuffer.html#DropItem\">TCircularItemsBuffer.DropItem</a> for further info.    ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#DropItem"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.InitializeItem", "text": "    <p>See <a class=\"normal\" href=\"TelemetryNetCircularBuffers.TCircularItemsBuffer.html#InitializeItem\">TCircularItemsBuffer.InitializeItem</a> for further info.    ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#InitializeItem"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.Create", "text": "    <p>   aSocket Socket to which current instance is assigned to. aSize Requiered size of created buffer.  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#Create"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.Destroy", "text": " Explicitly frees memory of all items.    ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#Destroy"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.Clear", "text": "    ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#Clear"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.AddPacket", "text": " If set to <code>False</code>, only pointer is stored in the item, so the passed buffer must not be freed (it will be freed automatically on item drop or when the instance is destroyed).<br> If buffer is full, then packet at current position is dropped (<a class=\"normal\" href=\"TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#DropItem\">DropItem</a> method is called) and replaced by the passed one.<br> Calls <a class=\"normal\" href=\"TelemetryNetCircularBuffers.TCircularItemsBuffer.html#AddItem\">AddItem</a> method.    <p>    <p>  Packet Packet buffer to be added. CreateCopy Determines whether packet copy or reference should be added to the buffer.  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#AddPacket"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.PeekPacket", "text": "    <p>   Oldest stored packet buffer. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#PeekPacket"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.RemovePacket", "text": "    <p>   <code>True</code> when packet was succesfully removed, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#RemovePacket"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.ContainsPacket", "text": "    <p>   <code>True</code> when the buffer contains at least one packet, othrewise <code>False</code>. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#ContainsPacket"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.Socket", "text": " Can be <code>Nil</code>.<br> This object is passed as &quot;Socket&quot; parameter in event calls. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#Socket"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.PacketsDropped", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#PacketsDropped"},
     {"title": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.OnPacketDrop", "text": " Use this event if you want to save or otherwise process stored data. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularPacketsBuffer.html#OnPacketDrop"},
     {"title": "TelemetryNetCircularBuffers.TBufferedChannel", "text": " Is is also returned when peeking this buffer. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TBufferedChannel.html"},
     {"title": "TelemetryNetCircularBuffers.TBufferedChannel.Name", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TBufferedChannel.html#Name"},
     {"title": "TelemetryNetCircularBuffers.TBufferedChannel.ID", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TBufferedChannel.html#ID"},
     {"title": "TelemetryNetCircularBuffers.TBufferedChannel.Index", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TBufferedChannel.html#Index"},
     {"title": "TelemetryNetCircularBuffers.TBufferedChannel.Value", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TBufferedChannel.html#Value"},
     {"title": "TelemetryNetCircularBuffers.TCircularChannelsBuffer", "text": " Refer to <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#BufferChannels\">TTelemetryNetServer.BufferChannels</a> property for details.    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.html"},
     {"title": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.InitializeItem", "text": "    <p>See <a class=\"normal\" href=\"TelemetryNetCircularBuffers.TCircularItemsBuffer.html#InitializeItem\">TCircularItemsBuffer.InitializeItem</a> for further info.    ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.html#InitializeItem"},
     {"title": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.Create", "text": "    <p>  aSize Requiered size of created buffer.  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.html#Create"},
     {"title": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.Destroy", "text": "    ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.html#Destroy"},
     {"title": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.AddChannel", "text": "    <p>     Name Name of added channel. ID Identificator of added channel. Index Index of added channel. Value Localized channel value.  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.html#AddChannel"},
     {"title": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.AddChannel", "text": "    <p>     Name Name of added channel. ID Identificator of added channel. Index Index of added channel. Value Channel value.  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.html#AddChannel"},
     {"title": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.AddChannel", "text": "    <p>     Name Name of added channel. ID Identificator of added channel. Index Index of added channel. Value Pointer to channel value.  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.html#AddChannel"},
     {"title": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.PeekChannel", "text": "    <p>   Oldest stored channel. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.html#PeekChannel"},
     {"title": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.RemoveChannel", "text": "    <p>   <code>True</code> when channel was succesfully removed, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.html#RemoveChannel"},
     {"title": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.ContainsChannel", "text": "    <p>   <code>True</code> when the buffer contains at least one channel, othrewise <code>False</code>. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TCircularChannelsBuffer.html#ContainsChannel"},
     {"title": "TelemetryNetCircularBuffers.TChannelRegisterAllOperationInfo", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TChannelRegisterAllOperationInfo.html"},
     {"title": "TelemetryNetCircularBuffers.TChannelRegisterAllOperationInfo.RegisterPrimaryTypes", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TChannelRegisterAllOperationInfo.html#RegisterPrimaryTypes"},
     {"title": "TelemetryNetCircularBuffers.TChannelRegisterAllOperationInfo.RegisterSecondaryTypes", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TChannelRegisterAllOperationInfo.html#RegisterSecondaryTypes"},
     {"title": "TelemetryNetCircularBuffers.TChannelRegisterAllOperationInfo.RegisterTertiaryTypes", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TChannelRegisterAllOperationInfo.html#RegisterTertiaryTypes"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperation", "text": " Is is also returned when peeking this buffer. *Params fields contain paramaters for given operation. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperation.html"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperation.FromSocket", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperation.html#FromSocket"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperation.OperationType", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperation.html#OperationType"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperation.EventParams", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperation.html#EventParams"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperation.ChannelParams", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperation.html#ChannelParams"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperation.ChannelsRegAllParams", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperation.html#ChannelsRegAllParams"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer", "text": " Refer to TTelemetryNerServer.fDefferedOperations field for more information.    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.html"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.InitializeItem", "text": "    <p>See <a class=\"normal\" href=\"TelemetryNetCircularBuffers.TCircularItemsBuffer.html#InitializeItem\">TCircularItemsBuffer.InitializeItem</a> for further info.    ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.html#InitializeItem"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.Create", "text": "    <p>  aSize Requiered size of created buffer.  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.html#Create"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.Destroy", "text": "    ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.html#Destroy"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.AddOperation", "text": "    <p><b>Warning!</b> - Use appropriate method for different operations.<br> This method is intended for operations with no parameters (<code>dotNone, dotEventRegisterAll, dotEventUnregisterAll, dotChannelUnregisterAll</code>). No items *Params field contains valid information.    <p>   FromSocket Socket which requested this operation. OperationType Type of deffered operation.  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.html#AddOperation"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.AddOperation", "text": "    <p><b>Warning!</b> - Use appropriate method for different operations.<br> This method is intended for event registration management operations (<code>dotEventRegister,dotEventUnregister</code>). Items EventParams field is filled.    <p>    FromSocket Socket which requested this operation. OperationType Type of deffered operation. Event Operation parameter (event identificator).  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.html#AddOperation"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.AddOperation", "text": "    <p><b>Warning!</b> - Use appropriate method for different operations.<br> This method is intended for basic channel registration management operations (<code>dotChannelRegister,dotChannelUnregister</code>). Items ChannelParams field is filled.    <p>       FromSocket Socket which requested this operation. OperationType Type of deffered operation. Name Operation parameter (channel name). Index Operation parameter (channel index). ValueType Operation parameter (channel value type). Flags Operation parameter (registration flags, valid only for <code>dotChannelRegister</code>).  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.html#AddOperation"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.AddOperation", "text": "    <p><b>Warning!</b> - Use appropriate method for different operations.<br> This method is intended for all channel registration operation (<code>dotChannelRegisterAll</code>). Items ChannelsRegAllParams field is filled.    <p>      FromSocket Socket which requested this operation. OperationType Type of deffered operation. PrimaryValueType Operation parameter (see <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#ChannelRegisterAll\">TTelemetryRecipient.ChannelRegisterAll</a> for details). SecondaryValueType Operation parameter (see <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#ChannelRegisterAll\">TTelemetryRecipient.ChannelRegisterAll</a> for details). TertiaryValueType Operation parameter (see <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#ChannelRegisterAll\">TTelemetryRecipient.ChannelRegisterAll</a> for details).  ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.html#AddOperation"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.PeekOperation", "text": "    <p>   Oldest deffered operation. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.html#PeekOperation"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.RemoveOperation", "text": "    <p>   <code>True</code> when operation was succesfully removed, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.html#RemoveOperation"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.ContainsOperation", "text": "    <p>   <code>True</code> when the buffer contains at least one deffered operation, othrewise <code>False</code>. ", "tags": "", "loc": "TelemetryNetCircularBuffers.TDefferedOperationsBuffer.html#ContainsOperation"},
     {"title": "TelemetryNetCircularBuffers.def_TCircularPacketsBuffer_BufferSize", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.html#def_TCircularPacketsBuffer_BufferSize"},
     {"title": "TelemetryNetCircularBuffers.def_TCircularChannelsBuffer_BufferSize", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.html#def_TCircularChannelsBuffer_BufferSize"},
     {"title": "TelemetryNetCircularBuffers.def_TDefferedOperationsBuffer_BufferSize", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.html#def_TDefferedOperationsBuffer_BufferSize"},
     {"title": "TelemetryNetCircularBuffers.TItemNotifyEvent", "text": " &quot;Item&quot; parameter contains pointer to data of affected item.    ", "tags": "", "loc": "TelemetryNetCircularBuffers.html#TItemNotifyEvent"},
     {"title": "TelemetryNetCircularBuffers.PBufferedChannel", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.html#PBufferedChannel"},
     {"title": "TelemetryNetCircularBuffers.TDefferedOperationType", "text": "  dotNone    dotEventRegister    dotEventUnregister    dotEventRegisterAll    dotEventUnregisterAll    dotChannelRegister    dotChannelUnregister    dotChannelRegisterAll    dotChannelUnregisterAll   ", "tags": "", "loc": "TelemetryNetCircularBuffers.html#TDefferedOperationType"},
     {"title": "TelemetryNetCircularBuffers.PDefferedOperation", "text": " ", "tags": "", "loc": "TelemetryNetCircularBuffers.html#PDefferedOperation"},
     {"title": "TelemetryNetClient", "text": " ", "tags": "", "loc": "TelemetryNetClient.html"},
     {"title": "TelemetryNetClient.TTelemetryNetClient", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fClientSocket", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fClientSocket"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fTelemetryInfoProvider", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fTelemetryInfoProvider"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fRegisteredEvents", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fRegisteredEvents"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fRegisteredChannels", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fRegisteredChannels"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fStoredConfigs", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fStoredConfigs"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fServerVersion", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fServerVersion"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fTelemetryVersion", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fTelemetryVersion"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fGameName", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fGameName"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fGameID", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fGameID"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fGameVersion", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fGameVersion"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fPassword", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fPassword"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fParseConfigEvents", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fParseConfigEvents"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fCompletionCounter", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fCompletionCounter"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fConnectionComplete", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fConnectionComplete"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.rsSrv_SendEvents", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#rsSrv_SendEvents"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.rsSrv_SendChannels", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#rsSrv_SendChannels"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.rsSrv_SendConfigs", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#rsSrv_SendConfigs"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.rsSrv_ActiveMode", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#rsSrv_ActiveMode"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.rsSrv_BufferChannels", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#rsSrv_BufferChannels"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.rsSrv_SendFrameEvents", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#rsSrv_SendFrameEvents"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.rsSrv_SaveSettingsToFile", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#rsSrv_SaveSettingsToFile"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.rsRec_KeepUtilityEvents", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#rsRec_KeepUtilityEvents"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.rsRec_StoreConfigurations", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#rsRec_StoreConfigurations"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.rsRec_ManageIndexedChannels", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#rsRec_ManageIndexedChannels"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.rsRec_StoreChannelValues", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#rsRec_StoreChannelValues"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.rsLst_ListMode", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#rsLst_ListMode"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.rsLst_ListFileName", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#rsLst_ListFileName"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnConnect", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnConnect"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnConnectionComplete", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnConnectionComplete"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnDisconnect", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnDisconnect"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnError", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnError"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnRead", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnRead"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnWrite", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnWrite"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnPacketDrop", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnPacketDrop"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnOverflowClear", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnOverflowClear"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnPacketReceived", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnPacketReceived"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnPacketSending", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnPacketSending"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnPacketSend", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnPacketSend"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnLog", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnLog"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnEventRegistered", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnEventRegistered"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnEventRegister", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnEventRegister"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnEventUnregister", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnEventUnregister"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnEvent", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnEvent"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnChannelRegistered", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnChannelRegistered"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnChannelRegister", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnChannelRegister"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnChannelUnregister", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnChannelUnregister"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnChannel", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnChannel"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnBufferedChannels", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnBufferedChannels"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnConfigStored", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnConfigStored"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnConfig", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnConfig"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnServerSettings", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnServerSettings"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.fOnDestroy", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#fOnDestroy"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.GetConnectedState", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#GetConnectedState"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.GetServerAddress", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#GetServerAddress"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.GetServerPort", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#GetServerPort"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.SetPassword", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#SetPassword"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.GetOnLookup", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#GetOnLookup"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.SetOnLookup", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#SetOnLookup"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.GetOnConnecting", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#GetOnConnecting"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.SetOnConnecting", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#SetOnConnecting"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnConnectHandler", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnConnectHandler"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnDisconnectHandler", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnDisconnectHandler"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnErrorHandler", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnErrorHandler"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnReadHandler", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnReadHandler"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnWriteHandler", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnWriteHandler"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnOverflowClearHandler", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnOverflowClearHandler"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnPacketDropHandler", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnPacketDropHandler"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnPacketHandler", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnPacketHandler"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacketGroup_COMMON", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacketGroup_COMMON"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacketGroup_ADMIN", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacketGroup_ADMIN"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacketGroup_SUPERADMIN", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacketGroup_SUPERADMIN"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacketGroup_EVENT_KNOWN", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacketGroup_EVENT_KNOWN"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacketGroup_CHANNEL_KNOWN", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacketGroup_CHANNEL_KNOWN"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacketGroup_CONFIG_KNOWN", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacketGroup_CONFIG_KNOWN"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacketGroup_EVENT", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacketGroup_EVENT"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacketGroup_CHANNEL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacketGroup_CHANNEL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacketGroup_CONFIG", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacketGroup_CONFIG"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacketGroup_LOG", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacketGroup_LOG"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_PING", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_PING"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_PING_RESPONSE", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_PING_RESPONSE"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_HI", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_HI"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_VERSION", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_VERSION"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_TELEMETRY_VERSION_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_TELEMETRY_VERSION_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_TELEMETRY_VERSION", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_TELEMETRY_VERSION"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_READY", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_READY"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_PARAM_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_PARAM_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_PARAM", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_PARAM"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_BYE", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_BYE"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_MESSAGE", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_MESSAGE"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_PACKET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_PACKET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_RIGHTS_ADMIN_REQUEST", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_RIGHTS_ADMIN_REQUEST"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_RIGHTS_ADMIN", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_RIGHTS_ADMIN"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ERROR", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ERROR"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_RIGHTS_SUPERADMIN_REQUEST", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_RIGHTS_SUPERADMIN_REQUEST"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_RIGHTS_SUPERADMIN", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_RIGHTS_SUPERADMIN"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CLIENT_CONNECTING", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_CONNECTING"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CLIENT_REJECTED", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_REJECTED"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CLIENT_CONNECTED", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_CONNECTED"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CLIENT_DISCONNECTED", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_DISCONNECTED"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CLIENT_CHANGE", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_CHANGE"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CLIENT_OPERATION", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_OPERATION"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CLIENT_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_COUNT_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CLIENT_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_COUNT"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CLIENT_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_INDEX_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CLIENT_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_INDEX"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CLIENT_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_INDEX_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CLIENT_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CLIENT_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_ALL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_COUNT_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_COUNT"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_INDEX_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_INDEX"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_INDEX_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_ALL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_CLEAR", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_CLEAR"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_ADD", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_ADD"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_REMOVE", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_REMOVE"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_DELETE", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_DELETE"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_RELOAD", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_RELOAD"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_SAVE", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_SAVE"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_LIST_CHANGE", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_LIST_CHANGE"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_SEND_MESSAGE", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_SEND_MESSAGE"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_PASSWORD", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_PASSWORD"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_CHANGE_PASSWORD", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_CHANGE_PASSWORD"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_ADMIN_PARAM_SET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_ADMIN_PARAM_SET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_SUPERADMIN_ADMIN_PASSWORD", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_SUPERADMIN_ADMIN_PASSWORD"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_SUPERADMIN_CHANGE_ADMIN_PASSWORD", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_SUPERADMIN_CHANGE_ADMIN_PASSWORD"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_KNOWN_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_COUNT_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_KNOWN_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_COUNT"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_KNOWN_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_INDEX_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_KNOWN_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_INDEX"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_KNOWN_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_INDEX_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_KNOWN_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_KNOWN_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_ALL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_COUNT_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_COUNT"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_INDEX_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_INDEX"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_INDEX_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_ALL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_KNOWN_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_COUNT_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_KNOWN_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_COUNT"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_KNOWN_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_INDEX_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_KNOWN_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_INDEX"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_KNOWN_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_INDEX_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_KNOWN_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_KNOWN_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_ALL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_REG", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_REG"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_REG_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_REG_ALL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_UNREG", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_UNREG"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_UNREG_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_UNREG_ALL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_EVENT", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_EVENT"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_REGISTERED", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_REGISTERED_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_COUNT_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_REGISTERED_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_COUNT"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_REGISTERED_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_INDEX_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_REGISTERED_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_INDEX"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_REGISTERED_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_INDEX_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_REGISTERED_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_EVENT_REGISTERED_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_ALL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_REG", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_REG"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_REG_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_REG_ALL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_UNREG", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_UNREG"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_UNREG_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_UNREG_ALL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_CHANNEL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_CHANNEL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_CHANNEL_BUFFERED", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_CHANNEL_BUFFERED"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_COUNT_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_COUNT"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_ALL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CHANNEL_STORED_SEND_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CHANNEL_STORED_SEND_ALL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_CONFIG", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_CONFIG"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_STORED", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_STORED"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_STORED_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_STORED_COUNT_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_STORED_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_STORED_COUNT"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_STORED_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_STORED_INDEX_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_STORED_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_STORED_INDEX"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_STORED_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_STORED_INDEX_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_STORED_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_STORED_ALL_GET"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_CONFIG_STORED_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_CONFIG_STORED_ALL"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessPacket_TN_PACKET_LOG_LOG", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessPacket_TN_PACKET_LOG_LOG"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.IncreaseCompletionCounter", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#IncreaseCompletionCounter"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ProcessConfigurationEvent", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ProcessConfigurationEvent"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.HighestSupportedServerVersion", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#HighestSupportedServerVersion"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.SupportsServerVersion", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#SupportsServerVersion"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.Create", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#Create"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.Destroy", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#Destroy"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.Connect", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#Connect"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.Disconnect", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#Disconnect"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.Send", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#Send"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.FillTelemetryInfoProvider", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#FillTelemetryInfoProvider"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.FillRegisteredItems", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#FillRegisteredItems"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.GetServerSettings", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#GetServerSettings"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.Log", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#Log"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.Log", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#Log"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.EventRegistered", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#EventRegistered"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.EventRegistered_Async", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#EventRegistered_Async"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.EventRegister", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#EventRegister"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.EventUnregister", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#EventUnregister"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.EventRegisterAll", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#EventRegisterAll"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.EventUnregisterAll", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#EventUnregisterAll"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ChannelRegistered", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ChannelRegistered"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ChannelRegistered_Async", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ChannelRegistered_Async"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ChannelRegister", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ChannelRegister"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ChannelUnregister", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ChannelUnregister"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ChannelRegisterAll", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ChannelRegisterAll"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ChannelUnregisterAll", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ChannelUnregisterAll"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ConfigStored", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ConfigStored"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ConfigStored_Async", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ConfigStored_Async"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.EventGetDataAsString", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#EventGetDataAsString"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ChannelGetValueAsString", "text": "    ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ChannelGetValueAsString"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.TelemetryInfoProvider", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#TelemetryInfoProvider"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.RegisteredEvents", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#RegisteredEvents"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.RegisteredChannels", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#RegisteredChannels"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.StoredConfigs", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#StoredConfigs"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.Connected", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#Connected"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ServerAddress", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ServerAddress"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ServerPort", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ServerPort"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ServerVersion", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ServerVersion"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.TelemetryVersion", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#TelemetryVersion"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.GameName", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#GameName"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.GameID", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#GameID"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.GameVersion", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#GameVersion"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.Password", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#Password"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ParseConfigurationEvents", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ParseConfigurationEvents"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.ConnectionComplete", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#ConnectionComplete"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.RemoteSettings_SrvActiveMode", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#RemoteSettings_SrvActiveMode"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.RemoteSettings_SrvBufferChannels", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#RemoteSettings_SrvBufferChannels"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.RemoteSettings_SrvSendFrameEvents", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#RemoteSettings_SrvSendFrameEvents"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.RemoteSettings_SrvSaveSettingsToFile", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#RemoteSettings_SrvSaveSettingsToFile"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.RemoteSettings_RecKeepUtilityEvents", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#RemoteSettings_RecKeepUtilityEvents"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.RemoteSettings_RecStoreConfigurations", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#RemoteSettings_RecStoreConfigurations"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.RemoteSettings_RecManageIndexedChannels", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#RemoteSettings_RecManageIndexedChannels"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.RemoteSettings_LstListMode", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#RemoteSettings_LstListMode"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.RemoteSettings_LstListFileName", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#RemoteSettings_LstListFileName"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnLookup", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnLookup"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnConnecting", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnConnecting"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnConnect", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnConnect"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnConnectionComplete", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnConnectionComplete"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnDisconnect", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnDisconnect"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnError", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnError"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnRead", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnRead"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnWrite", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnWrite"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnPacketDrop", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnPacketDrop"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnOverflowClear", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnOverflowClear"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnPacketReceived", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnPacketReceived"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnPacketSending", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnPacketSending"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnPacketSend", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnPacketSend"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnLog", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnLog"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnEventRegistered", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnEventRegistered"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnEventRegister", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnEventRegister"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnEventUnregister", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnEventUnregister"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnEvent", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnEvent"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnChannelRegistered", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnChannelRegistered"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnChannelRegister", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnChannelRegister"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnChannelUnregister", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnChannelUnregister"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnChannel", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnChannel"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnBufferedChannels", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnBufferedChannels"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnConfigStored", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnConfigStored"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnConfig", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnConfig"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnServerSettings", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnServerSettings"},
     {"title": "TelemetryNetClient.TTelemetryNetClient.OnDestroy", "text": " ", "tags": "", "loc": "TelemetryNetClient.TTelemetryNetClient.html#OnDestroy"},
     {"title": "TelemetryNetClient.TEventRegisteredEvent", "text": "    ", "tags": "", "loc": "TelemetryNetClient.html#TEventRegisteredEvent"},
     {"title": "TelemetryNetClient.TEventRegisterResultEvent", "text": "    ", "tags": "", "loc": "TelemetryNetClient.html#TEventRegisterResultEvent"},
     {"title": "TelemetryNetClient.TChannelRegisteredEvent", "text": "    ", "tags": "", "loc": "TelemetryNetClient.html#TChannelRegisteredEvent"},
     {"title": "TelemetryNetClient.TChannelRegisterResultEvent", "text": "    ", "tags": "", "loc": "TelemetryNetClient.html#TChannelRegisterResultEvent"},
     {"title": "TelemetryNetClient.TChannelUnregisterResultEvent", "text": "    ", "tags": "", "loc": "TelemetryNetClient.html#TChannelUnregisterResultEvent"},
     {"title": "TelemetryNetClient.TBufferedChannelsEvent", "text": "    ", "tags": "", "loc": "TelemetryNetClient.html#TBufferedChannelsEvent"},
     {"title": "TelemetryNetClient.TConfigStoredEvent", "text": "    ", "tags": "", "loc": "TelemetryNetClient.html#TConfigStoredEvent"},
     {"title": "TelemetryNetCommon", "text": "*******************************************************************************        <p><code>TelemetryNetCommon</code>    <p>©František Milt, all rights reserved    <p>This file contains types definitions, constants, classes, etc. used in more than one unit of Net part of Telemetry library (e.g. in both client and server).    <p>Last change: 2013-10-08    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-08 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryNetCommon.html"},
     {"title": "TelemetryNetCommon.def_ServerAddress", "text": " ", "tags": "", "loc": "TelemetryNetCommon.html#def_ServerAddress"},
     {"title": "TelemetryNetCommon.def_ServerPort", "text": " ", "tags": "", "loc": "TelemetryNetCommon.html#def_ServerPort"},
     {"title": "TelemetryNetCommon.cLargeBufferThreshold", "text": " This value is used when reading data from a socket. If amount of data received is larger than this value, then large buffer must be allocated, if it is lower or equal, then small on-stack buffer can be used. This behavior is there to avoid unnecessary memory allocation for small amount of data. ", "tags": "", "loc": "TelemetryNetCommon.html#cLargeBufferThreshold"},
     {"title": "TelemetryNetCommon.cEmptyGUID", "text": " It is used as placeholder when actual GUID is not known or needed. ", "tags": "", "loc": "TelemetryNetCommon.html#cEmptyGUID"},
     {"title": "TelemetryNetCommon.TParameterID", "text": "  pidInvalid    pidAll    pidSrvSendEvents    pidSrvSendChannels    pidSrvSendConfigs    pidSrvActiveMode    pidSrvBufferChannels    pidSrvSendFrameEvents    pidSrvSaveSettingsToFile    pidRecKeepUtilityEvents    pidRecStoreConfigurations    pidRecManageIndexedChannels    pidRecStoreChannelValues    pidLstListMode    pidLstListFileName   ", "tags": "", "loc": "TelemetryNetCommon.html#TParameterID"},
     {"title": "TelemetryNetCommon.TDisconnectReason", "text": "  drUnknown    drGeneral    drError    drServerTerminated    drClientTerminated    drWrongPassword    drPasswordChange    drServerUnsupported    drTelemetryUnsupported    drClientDisconnected    drDisconnectedByAdmin    drNotAllowed   ", "tags": "", "loc": "TelemetryNetCommon.html#TDisconnectReason"},
     {"title": "TelemetryNetCommon.TClientOperation", "text": "  copDisconnect    copMakeAdmin    copStripAdmin   ", "tags": "", "loc": "TelemetryNetCommon.html#TClientOperation"},
     {"title": "TelemetryNetHashing", "text": "*******************************************************************************        <p><code>TelemetryNetHashing</code>    <p>©František Milt, all rights reserved.    <p>This file contains types definitions, constants, routines, etc. used for hashing (e.g. password hashing).    <p>Last change: 2013-10-08    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-08 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryNetHashing.html"},
     {"title": "TelemetryNetHashing.HashCRC32", "text": "    Str String to be hashed. CRC32 hash of passed string. ", "tags": "", "loc": "TelemetryNetHashing.html#HashCRC32"},
     {"title": "TelemetryNetHashing.HashMD5", "text": "    Str String to be hashed. MD5 hash of passed string. ", "tags": "", "loc": "TelemetryNetHashing.html#HashMD5"},
     {"title": "TelemetryNetHashing.IsTextHash", "text": "      Text String controled for hash. HashType Type of hashing function used to create hash. Hash Pointer to actual hash. <code>True</code> when hash fits, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryNetHashing.html#IsTextHash"},
     {"title": "TelemetryNetHashing.THashType", "text": "  htUnknown    htCRC32    htMD5   ", "tags": "", "loc": "TelemetryNetHashing.html#THashType"},
     {"title": "TelemetryNetHashing.TCRC32Hash", "text": " ", "tags": "", "loc": "TelemetryNetHashing.html#TCRC32Hash"},
     {"title": "TelemetryNetHashing.PCRC32Hash", "text": " ", "tags": "", "loc": "TelemetryNetHashing.html#PCRC32Hash"},
     {"title": "TelemetryNetHashing.TMD5Hash", "text": " ", "tags": "", "loc": "TelemetryNetHashing.html#TMD5Hash"},
     {"title": "TelemetryNetHashing.PMD5Hash", "text": " ", "tags": "", "loc": "TelemetryNetHashing.html#PMD5Hash"},
     {"title": "TelemetryNetIncomingStream", "text": "*******************************************************************************        <p><code>TelemetryNetIncomingStream</code>    <p>©František Milt, all rights reserved.    <p>This unit contains <a class=\"normal\" href=\"TelemetryNetIncomingStream.TIncomingStream.html\">TIncomingStream</a> class (see declaration of this class for details).    <p>Last change: 2013-10-10    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-10 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryNetIncomingStream.html"},
     {"title": "TelemetryNetIncomingStream.TIncomingStream", "text": " Server-client communication is realized trought variable size packets, but incoming data do not have guaranteed size. That means, any incoming data have to be checked if they are complete, and when not, they must be stored and next received part must be appended at the end of them and the whole stream must be checked again.    <p>For better undestanding, here is small example: </p>    <ul class=\"paragraph_spacing\">    <li><p>sender sends packet 120 bytes long</p></li>    <li><p>receiver receives 100 bytes</p></li>    <li><p>they are checket for length, but are marked as incomplete (each packet has minimal size and actual size minus header size is stored at the beginning of each packet - see unit <a class=\"normal\" href=\"TelemetryNetPackets.html\">TelemetryNetPackets</a> for details)</p></li>    <li><p>incomplete data are stored to stream</p></li>    <li><p>receiver receives 24 bytes</p></li>    <li><p>they are appended and the whole stream is checked</p></li>    <li><p>as the stream is now evaluated as one complete packet 120 bytes long plus 4 additional unknown bytes, the first 120 bytes are passed as valid packet for further processing</p></li>    <li><p>after processing is done, the packet is removed, which means the stream now contains 4 bytes (probably first part of next packet)</p></li>  </ul>    <p>    <p>As this class is direct descendant of TMemoryStream, it contains all of its methods and fields and the actual memory stream is used internally.    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryNetIncomingStream.TIncomingStream.html"},
     {"title": "TelemetryNetIncomingStream.TIncomingStream.fSocket", "text": " ", "tags": "", "loc": "TelemetryNetIncomingStream.TIncomingStream.html#fSocket"},
     {"title": "TelemetryNetIncomingStream.TIncomingStream.fMaxSize", "text": " ", "tags": "", "loc": "TelemetryNetIncomingStream.TIncomingStream.html#fMaxSize"},
     {"title": "TelemetryNetIncomingStream.TIncomingStream.fOnOverflowClear", "text": " ", "tags": "", "loc": "TelemetryNetIncomingStream.TIncomingStream.html#fOnOverflowClear"},
     {"title": "TelemetryNetIncomingStream.TIncomingStream.fOnPacket", "text": " ", "tags": "", "loc": "TelemetryNetIncomingStream.TIncomingStream.html#fOnPacket"},
     {"title": "TelemetryNetIncomingStream.TIncomingStream.DirectBufferProcessing", "text": " It will evaluate whether these data can be passed as one whole packet for further processing, without any store operation, and if yes, they are passed (an <a class=\"normal\" href=\"TelemetryNetIncomingStream.TIncomingStream.html#OnPacket\">OnPacket</a> event is called).<br> To directly pass the data, internal stream must be empty and the buffer must contain just one whole valid packet. If the data cannot be directly passed, they are stored (see <a class=\"normal\" href=\"TelemetryNetIncomingStream.TIncomingStream.html#WriteIncomingBuffer\">WriteIncomingBuffer</a> method for details).<br>    <p>    <p>  Buffer Incoming data that has to be processed. <code>True</code> when buffer was processed directly, <code>False</code> when it was stored. ", "tags": "", "loc": "TelemetryNetIncomingStream.TIncomingStream.html#DirectBufferProcessing"},
     {"title": "TelemetryNetIncomingStream.TIncomingStream.Create", "text": "    <p>    <p>  aSocket <a class=\"normal\" href=\"TelemetryNetIncomingStream.TIncomingStream.html#Socket\">Socket</a> to which created instance will be bound. Can be <code>Nil</code>. aMaxSize Maximum size the stream can growth to (see <a class=\"normal\" href=\"TelemetryNetIncomingStream.TIncomingStream.html#MaxSize\">MaxSize</a> property).  ", "tags": "", "loc": "TelemetryNetIncomingStream.TIncomingStream.html#Create"},
     {"title": "TelemetryNetIncomingStream.TIncomingStream.WriteIncomingBuffer", "text": " If the data buffer cannot be directly processed, this function will store it in internal memory stream and calls <a class=\"normal\" href=\"TelemetryNetIncomingStream.TIncomingStream.html#GetPackets\">GetPackets</a> to check for packets in the whole stored stream. After that, size of the stream is evaluated and if it exceeds maximum allowed size, <a class=\"normal\" href=\"TelemetryNetIncomingStream.TIncomingStream.html#OnOverflowClear\">OnOverflowClear</a> event is called and the stream is cleared.    <p>   Buffer Incoming data. Count Size of the buffer on bytes.  ", "tags": "", "loc": "TelemetryNetIncomingStream.TIncomingStream.html#WriteIncomingBuffer"},
     {"title": "TelemetryNetIncomingStream.TIncomingStream.GetPackets", "text": " If one is found, it is passed to <a class=\"normal\" href=\"TelemetryNetIncomingStream.TIncomingStream.html#OnPacket\">OnPacket</a> event. At the end of this method, all packets found in stream are deleted along with any data preceding them. Only data after the last packet are kept stored.    ", "tags": "", "loc": "TelemetryNetIncomingStream.TIncomingStream.html#GetPackets"},
     {"title": "TelemetryNetIncomingStream.TIncomingStream.Socket", "text": " Can be <code>Nil</code>.<br> This object is passed as &quot;Socket&quot; parameter in event calls. ", "tags": "", "loc": "TelemetryNetIncomingStream.TIncomingStream.html#Socket"},
     {"title": "TelemetryNetIncomingStream.TIncomingStream.MaxSize", "text": " If internal stream holding incoming data becames larger than this value, then <a class=\"normal\" href=\"TelemetryNetIncomingStream.TIncomingStream.html#OnOverflowClear\">OnOverflowClear</a> event is called and after that, the entire stream is cleared (deleted, not destroyed).<br> This mechanism is there to prevent uncontrolled stream growth when the connection produces large number of invalid data.<br> This value is set during creation and thus is not initialized. ", "tags": "", "loc": "TelemetryNetIncomingStream.TIncomingStream.html#MaxSize"},
     {"title": "TelemetryNetIncomingStream.TIncomingStream.OnOverflowClear", "text": " If you want to react before any data are deleted, this is the right place. ", "tags": "", "loc": "TelemetryNetIncomingStream.TIncomingStream.html#OnOverflowClear"},
     {"title": "TelemetryNetIncomingStream.TIncomingStream.OnPacket", "text": " ", "tags": "", "loc": "TelemetryNetIncomingStream.TIncomingStream.html#OnPacket"},
     {"title": "TelemetryNetIncomingStream.def_MaxSize", "text": " ", "tags": "", "loc": "TelemetryNetIncomingStream.html#def_MaxSize"},
     {"title": "TelemetryNetLists", "text": "*******************************************************************************        <p><code>TelemetryNetLists</code>    <p>©František Milt, all rights reserved.    <p>Classes in this unit (for details, refer to declaration of individual class): </p>    <pre class=\"preformatted\">    TAddressList    TClientsList</pre>    <p>    <p>Last change: 2013-10-09    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-09 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryNetLists.html"},
     {"title": "TelemetryNetLists.TAddressList", "text": " Addresses are stored as strings. All comparisons are case insensitive.    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryNetLists.TAddressList.html"},
     {"title": "TelemetryNetLists.TAddressList.fListMode", "text": " ", "tags": "", "loc": "TelemetryNetLists.TAddressList.html#fListMode"},
     {"title": "TelemetryNetLists.TAddressList.fFileName", "text": " ", "tags": "", "loc": "TelemetryNetLists.TAddressList.html#fFileName"},
     {"title": "TelemetryNetLists.TAddressList.Create", "text": "    ", "tags": "", "loc": "TelemetryNetLists.TAddressList.html#Create"},
     {"title": "TelemetryNetLists.TAddressList.ClientCanConnect", "text": " When <a class=\"normal\" href=\"TelemetryNetLists.TAddressList.html#ListMode\">ListMode</a> is set to invalid/unknown value, this function returns <code>False</code>.    <p>    <p>  Address Address of connecting client as string. <code>True</code> when client is allowed to connect, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryNetLists.TAddressList.html#ClientCanConnect"},
     {"title": "TelemetryNetLists.TAddressList.ClientIsInList", "text": "    <p>    <p>  Address Address to be checked in string format. <code>True</code> when address if found in list, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryNetLists.TAddressList.html#ClientIsInList"},
     {"title": "TelemetryNetLists.TAddressList.SaveToFile", "text": "    <p>  FileName Name of file (fully qualified path) to which the list will be saved.  ", "tags": "", "loc": "TelemetryNetLists.TAddressList.html#SaveToFile"},
     {"title": "TelemetryNetLists.TAddressList.LoadFromFile", "text": "    <p>  FileName Name of file (fully qualified path) from which the list will be loaded.  ", "tags": "", "loc": "TelemetryNetLists.TAddressList.html#LoadFromFile"},
     {"title": "TelemetryNetLists.TAddressList.ListMode", "text": " For available values and behaviour for each of them, refer to <a class=\"normal\" href=\"TelemetryNetLists.html#TAddressListMode\">TAddressListMode</a> enumerated type.<br> Initialized to lmBlackList. ", "tags": "", "loc": "TelemetryNetLists.TAddressList.html#ListMode"},
     {"title": "TelemetryNetLists.TAddressList.FileName", "text": " Refer to them for details.<br> Initialized in following way: </p>    <pre class=\"longcode\">     ExtractFilePath(GetModuleName(hInstance)) + def_AddressListFileName;</pre>    <p> ...where <code>def_AddressListFileName</code> is string constant of value &quot;address.list.txt&quot; (without quotes). It means the file would be located in the same folder as executable or library compiled with this unit. ", "tags": "", "loc": "TelemetryNetLists.TAddressList.html#FileName"},
     {"title": "TelemetryNetLists.TClientInfo", "text": " ", "tags": "", "loc": "TelemetryNetLists.TClientInfo.html"},
     {"title": "TelemetryNetLists.TClientInfo.Identificator", "text": " ", "tags": "", "loc": "TelemetryNetLists.TClientInfo.html#Identificator"},
     {"title": "TelemetryNetLists.TClientInfo.Address", "text": " ", "tags": "", "loc": "TelemetryNetLists.TClientInfo.html#Address"},
     {"title": "TelemetryNetLists.TClientInfo.Port", "text": " ", "tags": "", "loc": "TelemetryNetLists.TClientInfo.html#Port"},
     {"title": "TelemetryNetLists.TClientInfo.WaitingForPassword", "text": " ", "tags": "", "loc": "TelemetryNetLists.TClientInfo.html#WaitingForPassword"},
     {"title": "TelemetryNetLists.TClientInfo.ReadyToWork", "text": " ", "tags": "", "loc": "TelemetryNetLists.TClientInfo.html#ReadyToWork"},
     {"title": "TelemetryNetLists.TClientInfo.AdminRights", "text": " ", "tags": "", "loc": "TelemetryNetLists.TClientInfo.html#AdminRights"},
     {"title": "TelemetryNetLists.TClientInfo.SuperAdminRights", "text": " ", "tags": "", "loc": "TelemetryNetLists.TClientInfo.html#SuperAdminRights"},
     {"title": "TelemetryNetLists.TClientsList", "text": "    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryNetLists.TClientsList.html"},
     {"title": "TelemetryNetLists.TClientsList.GetClientInfoPointer", "text": "    <p>    <p>  Index Index of requested item. Pointer to requested item. ", "tags": "", "loc": "TelemetryNetLists.TClientsList.html#GetClientInfoPointer"},
     {"title": "TelemetryNetLists.TClientsList.GetClientInfo", "text": "    <p>    <p>  Index Index of requested item. Requested item. ", "tags": "", "loc": "TelemetryNetLists.TClientsList.html#GetClientInfo"},
     {"title": "TelemetryNetLists.TClientsList.Clear", "text": "    ", "tags": "", "loc": "TelemetryNetLists.TClientsList.html#Clear"},
     {"title": "TelemetryNetLists.TClientsList.IndexOf", "text": " When the client is not found, -1 is returned.    <p>    <p>  Identificator Requested client identificator. Index of requested event, -1 when not found. ", "tags": "", "loc": "TelemetryNetLists.TClientsList.html#IndexOf"},
     {"title": "TelemetryNetLists.TClientsList.Add", "text": "    <p>          <p>  Identificator Client identificator. Address Remote address. Port Remote port. WaitingForPassword Indicates whether server is waiting for client to login. ReadyToWork Indicates whether client is ready for full communication exchange. AdminRights Indicates whether client has administrative rights. SuperAdminRights Indicates whether client has superadministrative rights. Index at which the new item was added, -1 when addition failed. ", "tags": "", "loc": "TelemetryNetLists.TClientsList.html#Add"},
     {"title": "TelemetryNetLists.TClientsList.Remove", "text": "    <p>    <p>  Identificator Indentificator of client that has to be removed. Index of client that was removed, -1 when requested client was not found. ", "tags": "", "loc": "TelemetryNetLists.TClientsList.html#Remove"},
     {"title": "TelemetryNetLists.TClientsList.Delete", "text": " When index falls out of allowed boundary (&lt;0,<a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#Count\">Count</a> - 1&gt;), an exception is raised.<br> <a class=\"normal\" href=\"TelemetryLists.TCustomTelemetryList.html#OnChange\">OnChange</a> event is called after successful deletion.    <p>  Index Index of client that has to be deleted.  ", "tags": "", "loc": "TelemetryNetLists.TClientsList.html#Delete"},
     {"title": "TelemetryNetLists.TClientsList.Pointers", "text": " Use it for direct access to individual stored items.<br> Unlike <a class=\"normal\" href=\"TelemetryNetLists.TClientsList.html#Clients\">Clients</a>[] property, you can use returned pointer to change values of stored items. ", "tags": "", "loc": "TelemetryNetLists.TClientsList.html#Pointers"},
     {"title": "TelemetryNetLists.TClientsList.Clients", "text": " Use it to obtain values of individual stored items. ", "tags": "", "loc": "TelemetryNetLists.TClientsList.html#Clients"},
     {"title": "TelemetryNetLists.TAddressListMode", "text": "      lmBlackList When client is listed, it cannot connect.   lmWhiteList Client can connect only when listed.   lmAllowAll All clients can connect.   lmDenyAll No client can connect (use with caution).  ", "tags": "", "loc": "TelemetryNetLists.html#TAddressListMode"},
     {"title": "TelemetryNetLists.PClientInfo", "text": " ", "tags": "", "loc": "TelemetryNetLists.html#PClientInfo"},
     {"title": "TelemetryNetPackets", "text": "*******************************************************************************        <p><code>TelemetryNetPackets</code>    <p>©František Milt, all rights reserved.    <p>Communication between server and client(s) is realized using variable length messages, called packets.    <p>All packets starts with header of this structure: </p>    <pre class=\"preformatted\">    begin      signature     4bytes  (TN_PACKET_SIGNATURE)      packet ID     4bytes  (identification number of the packet)      time stamp    8bytes  (local time when the packet was created)      payload size  4bytes  (signed 32bit integer, size of following payload in bytes, can be 0)    end;</pre>    <p>    <p>After this header an optional payload data follows.<br> Depending on payload presence, packets are divided into two groups, basic and extended.<br> Basic packets contains no data (field &quot;payload size&quot; is set to 0), only header, and are used only as notifications or non-parameter commands.<br> Extended packets are used mainly for data transfer or parametrized commands.<br> Packet payload can contain any data and its size is limited only by available memory (technical maximum 2GiB).    <p>Structure of packet payload (see individual packet ID definitions for appropriate structure) is only hint for processing implemetation, not actual structured type. For example, any basic packet can actually contain data, but they are ignored and discarded during processing.<br> All basic binary types (integers, floats, ...) are stored as little-endian.<br> Strings in packet payload are stored as following substructure: </p>    <pre class=\"preformatted\">    begin      length  4bytes  (signed 32bit integer, length of &quot;data&quot; field in AnsiChars)      data    []      (AnsiChars)    end;</pre>    <p>    <p>Actual packet ID number is composed from two fields, high word is ID prefix and low word is packet number in the prefix/usage group.<br> Prefixes are used to distinguish packet usage group. They are also used for better branching of packet processing.    <p>List of defined prefixes: </p>    <pre class=\"preformatted\">      TN_PREFIX_COMMON      TN_PREFIX_ADMIN      TN_PREFIX_SUPERADMIN      TN_PREFIX_EVENT_KNOWN      TN_PREFIX_CHANNEL_KNOWN      TN_PREFIX_CONFIG_KNOWN      TN_PREFIX_EVENT      TN_PREFIX_CHANNEL      TN_PREFIX_CONFIG      TN_PREFIX_LOG</pre>    <p>    <p>List of defined packet identificators (b = basic packet, e = extended packet, s = sent by server, c = sent by client, o = sent by both client and server, a = sent by any connection endpoint): </p>    <pre class=\"preformatted\">      - TN_PREFIX_COMMON prefix packets -      (b/a) TN_PACKET_PING      (b/a) TN_PACKET_PING_RESPONSE      (e/c) TN_PACKET_HI      (e/s) TN_PACKET_VERSION      (b/c) TN_PACKET_TELEMETRY_VERSION_GET      (e/s) TN_PACKET_TELEMETRY_VERSION      (b/c) TN_PACKET_READY      (e/c) TN_PACKET_PARAM_GET      (e/s) TN_PACKET_PARAM      (e/o) TN_PACKET_BYE      (e/s) TN_PACKET_MESSAGE      (e/a) TN_PACKET_PACKET      (e/c) TN_PACKET_RIGHTS_ADMIN_REQUEST      (e/o) TN_PACKET_RIGHTS_ADMIN      (e/a) TN_PACKET_ERROR      (e/c) TN_PACKET_RIGHTS_SUPERADMIN_REQUEST      (e/o) TN_PACKET_RIGHTS_SUPERADMIN        - TN_PREFIX_ADMIN prefix packets -      (e/s) TN_PACKET_ADMIN_CLIENT_CONNECTING      (e/s) TN_PACKET_ADMIN_CLIENT_REJECTED      (e/s) TN_PACKET_ADMIN_CLIENT_CONNECTED      (e/s) TN_PACKET_ADMIN_CLIENT_DISCONNECTED      (e/s) TN_PACKET_ADMIN_CLIENT_CHANGE      (e/c) TN_PACKET_ADMIN_CLIENT_OPERATION      (b/c) TN_PACKET_ADMIN_CLIENT_COUNT_GET      (e/s) TN_PACKET_ADMIN_CLIENT_COUNT      (e/c) TN_PACKET_ADMIN_CLIENT_INDEX_GET      (e/s) TN_PACKET_ADMIN_CLIENT_INDEX      (b/c) TN_PACKET_ADMIN_CLIENT_INDEX_ALL_GET      (b/c) TN_PACKET_ADMIN_CLIENT_ALL_GET      (e/s) TN_PACKET_ADMIN_CLIENT_ALL      (b/c) TN_PACKET_ADMIN_LIST_COUNT_GET      (e/s) TN_PACKET_ADMIN_LIST_COUNT      (e/c) TN_PACKET_ADMIN_LIST_INDEX_GET      (e/s) TN_PACKET_ADMIN_LIST_INDEX      (b/c) TN_PACKET_ADMIN_LIST_INDEX_ALL_GET      (b/c) TN_PACKET_ADMIN_LIST_ALL_GET      (e/s) TN_PACKET_ADMIN_LIST_ALL      (b/c) TN_PACKET_ADMIN_LIST_CLEAR      (e/c) TN_PACKET_ADMIN_LIST_ADD      (e/c) TN_PACKET_ADMIN_LIST_REMOVE      (e/c) TN_PACKET_ADMIN_LIST_DELETE      (b/c) TN_PACKET_ADMIN_LIST_RELOAD      (b/c) TN_PACKET_ADMIN_LIST_SAVE      (b/s) TN_PACKET_ADMIN_LIST_CHANGE      (e/c) TN_PACKET_ADMIN_SEND_MESSAGE      (e/o) TN_PACKET_ADMIN_PASSWORD      (e/c) TN_PACKET_ADMIN_CHANGE_PASSWORD      (e/c) TN_PACKET_ADMIN_PARAM_SET        - TN_PREFIX_SUPERADMIN prefix packets -      (e/o) TN_PACKET_SUPERADMIN_ADMIN_PASSWORD      (e/c) TN_PACKET_SUPERADMIN_CHANGE_ADMIN_PASSWORD        - TN_PREFIX_EVENT_KNOWN prefix packets -      (b/c) TN_PACKET_EVENT_KNOWN_COUNT_GET      (e/s) TN_PACKET_EVENT_KNOWN_COUNT      (e/c) TN_PACKET_EVENT_KNOWN_INDEX_GET      (e/s) TN_PACKET_EVENT_KNOWN_INDEX      (b/c) TN_PACKET_EVENT_KNOWN_INDEX_ALL_GET      (b/c) TN_PACKET_EVENT_KNOWN_ALL_GET      (e/s) TN_PACKET_EVENT_KNOWN_ALL        - TN_PREFIX_CHANNEL_KNOWN prefix packets -      (b/c) TN_PACKET_CHANNEL_KNOWN_COUNT_GET      (e/s) TN_PACKET_CHANNEL_KNOWN_COUNT      (e/c) TN_PACKET_CHANNEL_KNOWN_INDEX_GET      (e/s) TN_PACKET_CHANNEL_KNOWN_INDEX      (b/c) TN_PACKET_CHANNEL_KNOWN_INDEX_ALL_GET      (b/c) TN_PACKET_CHANNEL_KNOWN_ALL_GET      (e/s) TN_PACKET_CHANNEL_KNOWN_ALL        - TN_PREFIX_CONFIG_KNOWN prefix packets -      (b/c) TN_PACKET_CONFIG_KNOWN_COUNT_GET      (e/s) TN_PACKET_CONFIG_KNOWN_COUNT      (e/c) TN_PACKET_CONFIG_KNOWN_INDEX_GET      (e/s) TN_PACKET_CONFIG_KNOWN_INDEX      (b/c) TN_PACKET_CONFIG_KNOWN_INDEX_ALL_GET      (b/c) TN_PACKET_CONFIG_KNOWN_ALL_GET      (e/s) TN_PACKET_CONFIG_KNOWN_ALL        - TN_PREFIX_EVENT prefix packets -      (e/o) TN_PACKET_EVENT_REG      (b/c) TN_PACKET_EVENT_REG_ALL      (e/o) TN_PACKET_EVENT_UNREG      (b/c) TN_PACKET_EVENT_UNREG_ALL      (e/s) TN_PACKET_EVENT_EVENT      (e/o) TN_PACKET_EVENT_REGISTERED      (b/c) TN_PACKET_EVENT_REGISTERED_COUNT_GET      (e/s) TN_PACKET_EVENT_REGISTERED_COUNT      (e/c) TN_PACKET_EVENT_REGISTERED_INDEX_GET      (e/s) TN_PACKET_EVENT_REGISTERED_INDEX      (b/c) TN_PACKET_EVENT_REGISTERED_INDEX_ALL_GET      (b/c) TN_PACKET_EVENT_REGISTERED_ALL_GET      (e/s) TN_PACKET_EVENT_REGISTERED_ALL        - TN_PREFIX_CHANNEL prefix packets -      (e/o) TN_PACKET_CHANNEL_REG      (e/c) TN_PACKET_CHANNEL_REG_ALL      (e/o) TN_PACKET_CHANNEL_UNREG      (b/c) TN_PACKET_CHANNEL_UNREG_ALL      (e/s) TN_PACKET_CHANNEL_CHANNEL      (e/s) TN_PACKET_CHANNEL_CHANNEL_BUFFERED      (e/o) TN_PACKET_CHANNEL_REGISTERED      (b/c) TN_PACKET_CHANNEL_REGISTERED_COUNT_GET      (e/s) TN_PACKET_CHANNEL_REGISTERED_COUNT      (e/c) TN_PACKET_CHANNEL_REGISTERED_INDEX_GET      (e/s) TN_PACKET_CHANNEL_REGISTERED_INDEX      (b/c) TN_PACKET_CHANNEL_REGISTERED_INDEX_ALL_GET      (b/c) TN_PACKET_CHANNEL_REGISTERED_ALL_GET      (e/s) TN_PACKET_CHANNEL_REGISTERED_ALL      (e/c) TN_PACKET_CHANNEL_STORED_SEND_ALL        - TN_PREFIX_CONFIG prefix packets -      (e/s) TN_PACKET_CONFIG_CONFIG      (e/o) TN_PACKET_CONFIG_STORED      (b/c) TN_PACKET_CONFIG_STORED_COUNT_GET      (e/s) TN_PACKET_CONFIG_STORED_COUNT      (e/c) TN_PACKET_CONFIG_STORED_INDEX_GET      (e/s) TN_PACKET_CONFIG_STORED_INDEX      (b/c) TN_PACKET_CONFIG_STORED_INDEX_ALL_GET      (b/c) TN_PACKET_CONFIG_STORED_ALL_GET      (e/s) TN_PACKET_CONFIG_STORED_ALL        - TN_PREFIX_LOG prefix packets -      (e/o) TN_PACKET_LOG_LOG</pre>    <p>    <p>Last change: 2013-10-11    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-10 - First stable version.</p></li>  </ul>    <p>    <p>todo:</p>    <ul class=\"paragraph_spacing\">    <li><p>Add new packet - (e)TN_PACKET_DEFFERED - sent when received operation get deffered.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryNetPackets.html"},
     {"title": "TelemetryNetPackets.TPacketBuffer", "text": "   ", "tags": "", "loc": "TelemetryNetPackets.TPacketBuffer.html"},
     {"title": "TelemetryNetPackets.TPacketBuffer.Data", "text": " ", "tags": "", "loc": "TelemetryNetPackets.TPacketBuffer.html#Data"},
     {"title": "TelemetryNetPackets.TPacketBuffer.Size", "text": " ", "tags": "", "loc": "TelemetryNetPackets.TPacketBuffer.html#Size"},
     {"title": "TelemetryNetPackets.TPacketHeader", "text": " Used mainly to help gettig packet header from and to general buffers and in packets building and resolving.     ", "tags": "", "loc": "TelemetryNetPackets.TPacketHeader.html"},
     {"title": "TelemetryNetPackets.TPacketHeader.Signature", "text": " ", "tags": "", "loc": "TelemetryNetPackets.TPacketHeader.html#Signature"},
     {"title": "TelemetryNetPackets.TPacketHeader.PacketID", "text": " ", "tags": "", "loc": "TelemetryNetPackets.TPacketHeader.html#PacketID"},
     {"title": "TelemetryNetPackets.TPacketHeader.TimeStamp", "text": " ", "tags": "", "loc": "TelemetryNetPackets.TPacketHeader.html#TimeStamp"},
     {"title": "TelemetryNetPackets.TPacketHeader.PayloadSize", "text": " Can be 0. ", "tags": "", "loc": "TelemetryNetPackets.TPacketHeader.html#PayloadSize"},
     {"title": "TelemetryNetPackets.TN_PACKET_SIGNATURE", "text": " Every packet starts with this 4 byte value. It is used to check validity of incoming data and to find packet start in general data stream. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_SIGNATURE"},
     {"title": "TelemetryNetPackets.TN_MIN_PACKET_SIZE", "text": " Size of every packet must be equal to or greater than this value. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_MIN_PACKET_SIZE"},
     {"title": "TelemetryNetPackets.TN_PREFIX_COMMON", "text": " ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PREFIX_COMMON"},
     {"title": "TelemetryNetPackets.TN_PREFIX_ADMIN", "text": " Client must have admin rights to send and receive these packets, otherwise they are ignored. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PREFIX_ADMIN"},
     {"title": "TelemetryNetPackets.TN_PREFIX_SUPERADMIN", "text": " Client must have superadmin rights to send and receive these packets, otherwise they are ignored. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PREFIX_SUPERADMIN"},
     {"title": "TelemetryNetPackets.TN_PREFIX_EVENT_KNOWN", "text": " ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PREFIX_EVENT_KNOWN"},
     {"title": "TelemetryNetPackets.TN_PREFIX_CHANNEL_KNOWN", "text": " ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PREFIX_CHANNEL_KNOWN"},
     {"title": "TelemetryNetPackets.TN_PREFIX_CONFIG_KNOWN", "text": " ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PREFIX_CONFIG_KNOWN"},
     {"title": "TelemetryNetPackets.TN_PREFIX_EVENT", "text": " ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PREFIX_EVENT"},
     {"title": "TelemetryNetPackets.TN_PREFIX_CHANNEL", "text": " ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PREFIX_CHANNEL"},
     {"title": "TelemetryNetPackets.TN_PREFIX_CONFIG", "text": " ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PREFIX_CONFIG"},
     {"title": "TelemetryNetPackets.TN_PREFIX_LOG", "text": " ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PREFIX_LOG"},
     {"title": "TelemetryNetPackets.TN_PACKET_PING", "text": "    <p>Sender: Any<br> Packet: Basic    <p>Can be used to check connectivity or responsiveness of other side of the connection. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_PING"},
     {"title": "TelemetryNetPackets.TN_PACKET_PING_RESPONSE", "text": "    <p>Sender: Any<br> Packet: Basic    <p>Sent as immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_PING\">TN_PACKET_PING</a> packet. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_PING_RESPONSE"},
     {"title": "TelemetryNetPackets.TN_PACKET_HI", "text": "    <p>Sender: Client<br> Packet: Extended    <p></p>    <pre class=\"preformatted\">    begin      hash type       4B  (THashType)      password hash   []  (password hash)    end;  </pre>    <p> Sent by client to the server as first packet immediately after successful connection. Field &quot;hash type&quot; contains identificator denoting type of hashing function used to create password hash.<br> On server side - when hash does not match, client is immediately disconnected. Also, when server expects this packet and a different packet arrives, it is assumed the client does not known password and is immediatelly disconnected. When hash is right, the server sends information about its version (<a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_VERSION\">TN_PACKET_VERSION</a> packet) as an response to this packet. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_HI"},
     {"title": "TelemetryNetPackets.TN_PACKET_VERSION", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      server version    4B  (unsigned 32bit integer)    end;</pre>    <p>    <p>Sent as immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_HI\">TN_PACKET_HI</a>.<br> Contains server version (server capabilities and communication protocol). When client does not support given server version, it must immediately disconnect. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_VERSION"},
     {"title": "TelemetryNetPackets.TN_PACKET_TELEMETRY_VERSION_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send information about running telemetry recipient.<br> It can be sent any time, but is usually sent as immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_VERSION\">TN_PACKET_VERSION</a> packet (if client stays connected, i.e. supports server version from <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_VERSION\">TN_PACKET_VERSION</a>). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_TELEMETRY_VERSION_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_TELEMETRY_VERSION", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      telemetry version 4B      (scs_u32_t)      game ID           String  (variable size)      game version      4B      (scs_u32_t)      game name         String  (variable size)    end;</pre>    <p>    <p>Sent as immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_TELEMETRY_VERSION_GET\">TN_PACKET_TELEMETRY_VERSION_GET</a>.<br> Contains information about running telemetry recipient.<br> Client can react to these values (e.g. when it cannot work with given telemetry version and disconnects itself), but it is not mandatory. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_TELEMETRY_VERSION"},
     {"title": "TelemetryNetPackets.TN_PACKET_READY", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Sent to server when the client is ready to fully communicate. It is generated after the client receives and evaluates informations about server and telemetry/game versions. Until this packet is not received, server will not send or receive most of the packets for given connection. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_READY"},
     {"title": "TelemetryNetPackets.TN_PACKET_PARAM_GET", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      parameter id    4B  (TParameterID)    end;</pre>    <p>    <p>Instructs server to send value of parameter given by &quot;parameter id&quot; field.<br> For available values of &quot;paramter id&quot; refer to <a class=\"normal\" href=\"TelemetryNetCommon.html#TParameterID\">TParameterID</a> type declaration. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_PARAM_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_PARAM", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      parameter id    4B  (TParameterID)      data            []  (variable size, can have zero size)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_PARAM_GET\">TN_PACKET_PARAM_GET</a>. Field &quot;data&quot; contains actual value of requested parameter (identificator of which is stored in field &quot;parameter id&quot;).<br> If requested parameter was not valid, then &quot;parameter id&quot; contains <code>pidInvalid</code> and &quot;data&quot; field is empty (has zero size).<br> Size of the &quot;data&quot; field depends on actual parameter type.<br> This packet is also sent automatically to all clients every time any server settings parameter is set. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_PARAM"},
     {"title": "TelemetryNetPackets.TN_PACKET_BYE", "text": "    <p>Sender: Server, Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      disconnection reason  4B  (TDisconnectReason)    end;</pre>    <p>    <p>Server:<br> Sent to client when it is going to be disconnected by the server.<br> When client receives this packet, it can execute any actions preceding disconnection, but should not disconnect itself.    <p>Client:<br> Sent to server when the client is about to disconnect. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_BYE"},
     {"title": "TelemetryNetPackets.TN_PACKET_MESSAGE", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      message text    String  (variable size)    end;</pre>    <p>    <p>Used to send text messages to clients. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_MESSAGE"},
     {"title": "TelemetryNetPackets.TN_PACKET_PACKET", "text": "    <p>Sender: Any<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      payload   []  (data carried by packet, can be empty)    end;</pre>    <p>    <p>Used to send unspecified data. Size of &quot;payload&quot; field is stored in &quot;PayloadSize&quot; field of packet header. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_PACKET"},
     {"title": "TelemetryNetPackets.TN_PACKET_RIGHTS_ADMIN_REQUEST", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      hash type       4B  (THashType)      password hash   []  (password hash)    end;</pre>    <p>    <p>Sent by client that requests administrative rights. Field &quot;hash type&quot; contains identificator denoting type of hashing function used to create password hash.<br> When the password hash is evaluated as valid, the server grants admin rights to sender client (see <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_RIGHTS_ADMIN\">TN_PACKET_RIGHTS_ADMIN</a> packet).    <p><b>Note:</b> Admin password differs from general password. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_RIGHTS_ADMIN_REQUEST"},
     {"title": "TelemetryNetPackets.TN_PACKET_RIGHTS_ADMIN", "text": "    <p>Sender: Server, Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      granted   1B    (boolean)    end;</pre>    <p>    <p>Server:<br> Sent by server to client that has requested administrative rights or information about status of itself. When field &quot;granted&quot; is set to <code>True</code>, then admin rights have been granted to the client, otherwise they were not.    <p>Client:<br> Instructs server to send whether sender has administrative rights. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_RIGHTS_ADMIN"},
     {"title": "TelemetryNetPackets.TN_PACKET_ERROR", "text": "    <p>Sender: Any<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      packet id           4B  (unsigned 32bit integer)      packet time stamp   8B  (TDateTime)      error type          4B  (TPacketErrorType)      error code          4B  (unsigned 32bit integer)    end;</pre>    <p>    <p>Sent back when recipient receives erroneous packet. Fileds &quot;packet id&quot; and &quot;packet time stamp&quot; contains id and time stamp of packet that was evaluated as broken. &quot;error type&quot; contains identificator denoting the nature of error. Field &quot;error code&quot; contains system error code for last error - it is set only for selected error types, for other types, it is set to 0. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ERROR"},
     {"title": "TelemetryNetPackets.TN_PACKET_RIGHTS_SUPERADMIN_REQUEST", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      hash type       4B  (THashType)      password hash   []  (password hash)    end;</pre>    <p>    <p>Sent by client that requests super-administrative rights. Field &quot;hash type&quot; contains identificator denoting type of hashing function used to create password hash.<br> When the password hash is evaluated as valid, the server grants superadmin rights to sender client (see <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_RIGHTS_SUPERADMIN\">TN_PACKET_RIGHTS_SUPERADMIN</a> packet).    <p><b>Note:</b> SuperAdmin password differs from admin password. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_RIGHTS_SUPERADMIN_REQUEST"},
     {"title": "TelemetryNetPackets.TN_PACKET_RIGHTS_SUPERADMIN", "text": "    <p>Sender: Server, Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      granted   1B    (boolean)    end;</pre>    <p>    <p>Server:<br> Sent by server to client that has requested super-administrative rights or information about status of itself. When field &quot;granted&quot; is set to <code>True</code>, then superadmin rights have been granted to the client, otherwise they were not.    <p>Client:<br> Instructs server to send whether sender has suer-administrative rights. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_RIGHTS_SUPERADMIN"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CLIENT_CONNECTING", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      client id     16B     (TGUID)      client IP     String  (variable size)      client port   4B      (unsigned 32bit integer)    end;</pre>    <p>    <p>Sent to all administrators when new client is connecting. At this stage, client is technically connected, but it has to be still checked against address list - this check can result in forced client disconnection. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_CONNECTING"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CLIENT_REJECTED", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      client id     16B     (TGUID)      client IP     String  (variable size)      client port   4B      (unsigned 32bit integer)      in list       1B      (boolean)    end;</pre>    <p>    <p>Sent to all administrators when connecting client is rejected (e.g. because client address is listed in address list which is set to black list mode) and will be disconnected.<br> &quot;in list&quot; is set to <code>True</code> when rejected client was listed (means address list was propably set to <code>lmBlackList</code> or <code>lmDenyAll</code>, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_REJECTED"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CLIENT_CONNECTED", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      client id     16B     (TGUID)      client IP     String  (variable size)      client port   4B      (unsigned 32bit integer)    end;</pre>    <p>    <p>Sent to all administrators when client has successfuly finished connection. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_CONNECTED"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CLIENT_DISCONNECTED", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      client id     16B     (TGUID)      client IP     String  (variable size)      client port   4B      (unsigned 32bit integer)    end;</pre>    <p>    <p>Sent to all administrators when client is disconnecting. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_DISCONNECTED"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CLIENT_CHANGE", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      client id             16B     (TGUID)      client IP             String  (variable size)      client port           4B      (unsigned 32bit integer)      waiting for password  1B      (boolean)      ready to work         1B      (boolean)      admin rights          1B      (boolean)      superadmin rights     1B      (boolean)    end;</pre>    <p>    <p>Sent to all administrators whenever status of any connected client changes (for example when client is granted administrative rights). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_CHANGE"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CLIENT_OPERATION", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      client id   16B     (TGUID)      operation    4B     (TClientOperation)    end;</pre>    <p>    <p>Instructs server to execute operation (id of requested operation is stored in &quot;operation&quot; filed, see <a class=\"normal\" href=\"TelemetryNetCommon.html#TClientOperation\">TClientOperation</a> type for available operations) on client with identificator from &quot;client id&quot; field. When no client with given id is connected, no operation is performed and server send back error packet with error type set to petUnknownClient. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_OPERATION"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CLIENT_COUNT_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send number of connected clients. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_COUNT_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CLIENT_COUNT", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Sent as a response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_COUNT_GET\">TN_PACKET_ADMIN_CLIENT_COUNT_GET</a> packet. &quot;count&quot; field contains number of connected clients. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_COUNT"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CLIENT_INDEX_GET", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Instructs server to send information about client listed at position given by &quot;index&quot;. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_INDEX_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CLIENT_INDEX", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index                 4B      (signed 32bit integer)      client id             16B     (TGUID)      client IP             String  (variable size)      client port           4B      (unsigned 32bit integer)      waiting for password  1B      (boolean)      ready to work         1B      (boolean)      admin rights          1B      (boolean)      superadmin rights     1B      (boolean)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_INDEX_GET\">TN_PACKET_ADMIN_CLIENT_INDEX_GET</a> packet.<br> Contains information about client on position given by &quot;index&quot;. If &quot;index&quot; in <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_INDEX_GET\">TN_PACKET_ADMIN_CLIENT_INDEX_GET</a> pointed to invalid position, then &quot;index&quot; in this packet is set to -1 and other fields are set to 0, <code>False</code> or empty string (&quot;client id&quot; contains <a class=\"normal\" href=\"TelemetryNetCommon.html#cEmptyGUID\">cEmptyGUID</a> constant value). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_INDEX"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CLIENT_INDEX_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send informations about all connected clients. They are immediately sent as a stream of <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_INDEX\">TN_PACKET_ADMIN_CLIENT_INDEX</a> packets. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_INDEX_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CLIENT_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send informations about all connected clients. They are all sent in one <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_EVENT_KNOWN_ALL\">TN_PACKET_EVENT_KNOWN_ALL</a> packet (see below). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CLIENT_ALL", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count     4B  (signed 32bit integer, number of info substructures)      info      substructure[]      begin        client id             16B     (TGUID)        client IP             String  (variable size)        client port           4B      (unsigned 32bit integer)        waiting for password  1B      (boolean)        ready to work         1B      (boolean)        admin rights          1B      (boolean)        superadmin rights     1B      (boolean)      end;    end;</pre>    <p>    <p>Immediate response to <code>TN_PACKET_ADMIN_CLIENT_ALL</code>. Contains array of informations about all connected clients. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CLIENT_ALL"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_COUNT_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send number of adresses in address list. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_COUNT_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_COUNT", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Sent as a response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_COUNT_GET\">TN_PACKET_ADMIN_LIST_COUNT_GET</a> packet. &quot;count&quot; field contains number of adresses in address list. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_COUNT"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_INDEX_GET", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Instructs server to send address listed in address list at position given by &quot;index&quot;. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_INDEX_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_INDEX", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index   4B      (signed 32bit integer)      item    String  (variable size)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_INDEX_GET\">TN_PACKET_ADMIN_LIST_INDEX_GET</a> packet.<br> Contains address listed at position given by &quot;index&quot;.<br> If &quot;index&quot; in <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_INDEX_GET\">TN_PACKET_ADMIN_LIST_INDEX_GET</a> pointed to invalid position, then &quot;index&quot; in this packet is set to -1 and &quot;item&quot; is set to an empty string. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_INDEX"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_INDEX_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send all addresses in adress list. They are immediately sent as a stream of <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_INDEX\">TN_PACKET_ADMIN_LIST_INDEX</a> packets. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_INDEX_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send all addresses in adress list. They are all sent in one <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_ALL\">TN_PACKET_ADMIN_LIST_ALL</a> packet (see below). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_ALL", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count     4B        (signed 32bit integer, number of &quot;item&quot; fields)      item      String[]  (variable size)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_ALL_GET\">TN_PACKET_ADMIN_LIST_ALL_GET</a>. Contains array of all adresses listed in adress list. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_ALL"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_CLEAR", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to clear address list (delete all items). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_CLEAR"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_ADD", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      item  String  (variable size)    end;</pre>    <p>    <p>Instructs server to add address in &quot;item&quot; field to address list. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_ADD"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_REMOVE", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      item  String  (variable size)    end;</pre>    <p>    <p>Instructs server to remove address given in &quot;item&quot; field from adress list. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_REMOVE"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_DELETE", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Instructs server to delete item at position given by &quot;index&quot; from adress list. When index falls out of allowed boundary, error packet is sent back with error type set to <code>petGeneral</code>. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_DELETE"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_RELOAD", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Executed only when server property SaveSettingsToFile is set to <code>True</code>.<br> Instructs server to clear the address list and load its content from file (<a class=\"normal\" href=\"TelemetryNetLists.TAddressList.html#LoadFromFile\">TAddressList.LoadFromFile</a> method is called). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_RELOAD"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_SAVE", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Executed only when server property SaveSettingsToFile is set to <code>True</code>.<br> Instructs server to save address list to a file (<a class=\"normal\" href=\"TelemetryNetLists.TAddressList.html#SaveToFile\">TAddressList.SaveToFile</a> method is called). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_SAVE"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_LIST_CHANGE", "text": "    <p>Sender: Server<br> Packet: Basic    <p>Sent to all administrators whenever adress list changes (item is added, removed, etc.). When admin client receive this packet, it should update own remote address list. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_LIST_CHANGE"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_SEND_MESSAGE", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      client    16B     (TGUID)      message   String  (variable size)    end;</pre>    <p>    <p>Instructs server to send text message to client with given id. When no client with requested id is fount, server sends back error packet with error type set to petUnknownClient. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_SEND_MESSAGE"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_PASSWORD", "text": "    <p>Sender: Server, Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      password  String  (variable size)    end;</pre>    <p>    <p>Server:<br> Sent to client that requested the password. &quot;password&quot; contains actual login password that is set on server.    <p>Client:<br> Instructs server send back actual password. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_PASSWORD"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_CHANGE_PASSWORD", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      password  String  (variable size)    end;</pre>    <p>    <p>Instructs server to change login password.    <p><b>Warning!</b> - All clients are disconnected when the password is changed. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_CHANGE_PASSWORD"},
     {"title": "TelemetryNetPackets.TN_PACKET_ADMIN_PARAM_SET", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      parameter id    4B  (TParameterID)      value           []  (variable size)    end;</pre>    <p>    <p>Instructs server to set selected settings parameter to defined value.<br> If &quot;parameter id&quot; is not valid, or &quot;value&quot; size is too small, then no action is executed.<br> Size of the &quot;data&quot; field depends on actual parameter type.<br> This packet is intended to remotely change server settings at run-time. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_ADMIN_PARAM_SET"},
     {"title": "TelemetryNetPackets.TN_PACKET_SUPERADMIN_ADMIN_PASSWORD", "text": "    <p>Sender: Server, Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      password  String  (variable size)    end;</pre>    <p>    <p>Server:<br> Sent to client that requested the password. &quot;password&quot; contains actual admin password that is set on server.    <p>Client:<br> Instructs server send back actual admin password. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_SUPERADMIN_ADMIN_PASSWORD"},
     {"title": "TelemetryNetPackets.TN_PACKET_SUPERADMIN_CHANGE_ADMIN_PASSWORD", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      password  String  (variable size)    end;</pre>    <p>    <p>Instructs server to change admin password.    <p><b>Warning!</b> - All administrators are stripped of their admin rights when the password is changed. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_SUPERADMIN_CHANGE_ADMIN_PASSWORD"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_KNOWN_COUNT_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send number of known events. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_KNOWN_COUNT_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_KNOWN_COUNT", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_EVENT_KNOWN_COUNT_GET\">TN_PACKET_EVENT_KNOWN_COUNT_GET</a>.<br> Contains number of known events. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_KNOWN_COUNT"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_KNOWN_INDEX_GET", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Instructs server to send known event on position given by &quot;index&quot;. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_KNOWN_INDEX_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_KNOWN_INDEX", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index   4B      (signed 32bit integer)      event   4B      (scs_event_t)      name    String  (variable size)      valid   1B      (boolean)      utility 1B      (boolean)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_EVENT_KNOWN_INDEX_GET\">TN_PACKET_EVENT_KNOWN_INDEX_GET</a>.<br> Contains information about known event on position given by &quot;index&quot;.<br> If &quot;index&quot; in <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_EVENT_KNOWN_INDEX_GET\">TN_PACKET_EVENT_KNOWN_INDEX_GET</a> pointed to invalid position, then &quot;index&quot; in this packet is set to -1 and other fields (Event, Name, ...) are set to 0/<code>False</code>/empty string. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_KNOWN_INDEX"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_KNOWN_INDEX_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send all known events. They are immediately sent as a stream of <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_EVENT_KNOWN_INDEX\">TN_PACKET_EVENT_KNOWN_INDEX</a> packets. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_KNOWN_INDEX_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_KNOWN_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send all known events. They are all sent in one <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_EVENT_KNOWN_ALL\">TN_PACKET_EVENT_KNOWN_ALL</a> packet (see below). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_KNOWN_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_KNOWN_ALL", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count     4B  (signed 32bit integer, number of info substructures)      info      substructure[]      begin        event     4B      (scs_event_t)        name      String  (variable size)        valid     1B      (boolean)        utility   1B      (boolean)      end;    end;</pre>    <p>    <p>Immediate response to <code>TN_PACKET_EVENT_KNOWN_ALL</code>.<br> Contains array of known events informations. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_KNOWN_ALL"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_KNOWN_COUNT_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send number of known channels. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_KNOWN_COUNT_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_KNOWN_COUNT", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_KNOWN_COUNT_GET\">TN_PACKET_CHANNEL_KNOWN_COUNT_GET</a>.<br> Contains number of known channels. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_KNOWN_COUNT"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_KNOWN_INDEX_GET", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Instructs server to send known channel on position given by &quot;index&quot;. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_KNOWN_INDEX_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_KNOWN_INDEX", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index             4B      (signed 32bit integer)      name              String  (variable size)      id                4B      (TChannelID)      primary type      4B      (scs_value_type_t)      secondary type    4B      (scs_value_type_t)      tertiary type     4B      (scs_value_type_t)      indexed           1B      (boolean)      index config      String  (variable size)      index config id   4B      (TItemID)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_KNOWN_INDEX_GET\">TN_PACKET_CHANNEL_KNOWN_INDEX_GET</a>.<br> Contains information about known channel on position given by &quot;index&quot;.<br> If &quot;index&quot; in <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_KNOWN_INDEX_GET\">TN_PACKET_CHANNEL_KNOWN_INDEX_GET</a> pointed to invalid position, then &quot;index&quot; in this packet is set to -1 and other fields (name, etc.) are set to 0/<code>False</code>/empty string. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_KNOWN_INDEX"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_KNOWN_INDEX_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send all known channels. They are immediately sent as a stream of <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_KNOWN_INDEX\">TN_PACKET_CHANNEL_KNOWN_INDEX</a> packets. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_KNOWN_INDEX_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_KNOWN_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send all known channels. They are all sent in one <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_KNOWN_ALL\">TN_PACKET_CHANNEL_KNOWN_ALL</a> packet (see below). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_KNOWN_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_KNOWN_ALL", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count     4B  (signed 32bit integer, number of info substructures)      info      substructure[]      begin        name:             String  (variable size)        id                4B      (TChannelID)        primary type      4B      (scs_value_type_t)        secondary type    4B      (scs_value_type_t)        tertiary type     4B      (scs_value_type_t)        indexed:          1B      (boolean)        index config      String  (variable size)        index config id   4B      (TItemID)      end;    end; </pre>    <p>    <p>Immediate response to <code>TN_PACKET_CHANNEL_KNOWN_ALL</code>.<br> Contains array of known channels informations. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_KNOWN_ALL"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_KNOWN_COUNT_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send number of known configs. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_KNOWN_COUNT_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_KNOWN_COUNT", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CONFIG_KNOWN_COUNT_GET\">TN_PACKET_CONFIG_KNOWN_COUNT_GET</a>.<br> Contains number of known configs. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_KNOWN_COUNT"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_KNOWN_INDEX_GET", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Instructs server to send known config on position given by &quot;index&quot;. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_KNOWN_INDEX_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_KNOWN_INDEX", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index         4B      (signed 32bit integer)      name          String  (variable size)      id            4B      (TConfigID)      value type    4B      (scs_value_type_t)      indexed       1B      (boolean)      binded        1B      (boolean)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CONFIG_KNOWN_INDEX_GET\">TN_PACKET_CONFIG_KNOWN_INDEX_GET</a>.<br> Contains information about known config on position given by &quot;index&quot;.<br> If &quot;index&quot; in <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CONFIG_KNOWN_INDEX_GET\">TN_PACKET_CONFIG_KNOWN_INDEX_GET</a> pointed to invalid position, then &quot;index&quot; in this packet is set to -1 and other fields (name, etc.) are set to 0/<code>False</code>/empty string. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_KNOWN_INDEX"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_KNOWN_INDEX_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send all known configs. They are immediately sent as a stream of <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CONFIG_KNOWN_INDEX\">TN_PACKET_CONFIG_KNOWN_INDEX</a> packets. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_KNOWN_INDEX_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_KNOWN_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send all known configs. They are all sent in one <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CONFIG_KNOWN_ALL\">TN_PACKET_CONFIG_KNOWN_ALL</a> packet (see below). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_KNOWN_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_KNOWN_ALL", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count     4B  (signed 32bit integer, number of info substructures)      info      substructure[]      begin        name:         String  (variable size)        id            4B      (TConfigID)        value type:   4B      (scs_value_type_t)        indexed:      1B      (boolean)        binded:       1B      (boolean)      end;    end;</pre>    <p>    <p>Immediate response to <code>TN_PACKET_CONFIG_KNOWN_ALL</code>.<br> Contains array of known configs informations. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_KNOWN_ALL"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_REG", "text": "    <p>Sender: Server, Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      event   4B  (scs_event_t)      result  4B  (scs_result_t)    end;</pre>    <p>    <p>Server:<br> Sent to all clients when given event is succesfuly registered (&quot;result&quot; field set to SCS_RESULT_ok).<br> If registration of event fails, server send this packet back only to registering client with &quot;result&quot; field set to result code from registration.    <p>Client:<br> Instructs server to register a particular event.<br> &quot;result&quot; field should be set to SCS_RESULT_ok. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_REG"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_REG_ALL", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to register all known events. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_REG_ALL"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_UNREG", "text": "    <p>Sender: Server, Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      event   4B  (scs_event_t)      result  4B  (scs_result_t)    end;</pre>    <p>    <p>Server:<br> Send to all clients when given event is succesfuly unregistered (&quot;result&quot; field set to SCS_RESULT_ok).<br> If unregistration of event fails, server send this packet back only to unregistering client with &quot;result&quot; field set to result code from unregistration.    <p>Client:<br> Instructs server to unregister a particular event.<br> &quot;result&quot; field should be set to SCS_RESULT_ok. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_UNREG"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_UNREG_ALL", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to unregister all known events. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_UNREG_ALL"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_EVENT", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      event       4B  (scs_event_t)      data size   4B  (unsigned 32bit integer)      data        []  (variable size, can be empty)    end;</pre>    <p>    <p>Sent to all clients on all game avents occurence. &quot;data&quot; field content depends on event type, and can be empty.    <p>Content of &quot;data&quot; for individual events: </p>    <pre class=\"preformatted\">    SCS_TELEMETRY_EVENT_frame_start      Contains one scs_telemetry_frame_start_t structure.      SCS_TELEMETRY_EVENT_configuration      begin        id            String          (variable size)        named value   substructure[]  (array of named values)        begin          name          String          (variable size)          index         4B              (scs_u32_t)          value type    4B              (scs_value_type_t)          value         []              (variable size data, actual size depends                                         on value type)        end;        0x00000000      4B            (array ends with an empty string)      end;</pre>    <p>    <p>At the moment, all other events have no data attached. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_EVENT"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_REGISTERED", "text": "    <p>Sender: Server, Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      event       4B  (scs_event_t)      registered  1B  (boolean)    end;</pre>    <p>    <p>Server:<br> Sent back to instructing client. Field &quot;registered&quot; contains <code>True</code> when given event is registered, otherwise <code>False</code>.    <p>Client:<br> Instructs server to check whether given event is registered.<br> &quot;registered&quot; field can have any value. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_REGISTERED_COUNT_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send number of registered events. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED_COUNT_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_REGISTERED_COUNT", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED_COUNT_GET\">TN_PACKET_EVENT_REGISTERED_COUNT_GET</a>.<br> Contains number of registered events. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED_COUNT"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_REGISTERED_INDEX_GET", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Instructs server to send information about registered event on list position given by &quot;index&quot;. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED_INDEX_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_REGISTERED_INDEX", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index   4B  (signed 32bit integer)      event   4B  (scs_event_t)      utility 1B  (boolean)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED_INDEX_GET\">TN_PACKET_EVENT_REGISTERED_INDEX_GET</a>.<br> Contains information about registered event on position given by &quot;index&quot;.<br> If &quot;index&quot; in <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED_INDEX_GET\">TN_PACKET_EVENT_REGISTERED_INDEX_GET</a> pointed to invalid position, then &quot;index&quot; in this packet is set to -1, field &quot;event&quot; is set to SCS_TELEMETRY_EVENT_invalid (0) and &quot;utility&quot; to <code>False</code>. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED_INDEX"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_REGISTERED_INDEX_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send information about all registered events. They are immediately sent as a stream of <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED_INDEX\">TN_PACKET_EVENT_REGISTERED_INDEX</a> packets. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED_INDEX_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_REGISTERED_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send all registered events. They are all sent in one <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED_ALL\">TN_PACKET_EVENT_REGISTERED_ALL</a> packet (see below). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_EVENT_REGISTERED_ALL", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count     4B    (signed 32bit integer, number of info substructures)      info  substructure[]      begin        event     4B    (scs_event_t)        utility   1B    (boolean)      end;    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED_ALL_GET\">TN_PACKET_EVENT_REGISTERED_ALL_GET</a>.<br> Contains array of registered events. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_EVENT_REGISTERED_ALL"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_REG", "text": "    <p>Sender: Server, Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      name          String  (variable size)      index         4B      (scs_u32_t)      value type    4B      (scs_value_type_t)      flags         4B      (scs_u32_t)      result        4B      (scs_result_t)    end;</pre>    <p>    <p>Server:<br> Sent to all clients when given channel is succesfuly registered (&quot;result&quot; field set to SCS_RESULT_ok).<br> If registration of channel fails, server send this packet back only to registering client with &quot;result&quot; field set to result code from registration.    <p>Client:<br> Instructs server to register a particular channel.<br> &quot;result&quot; field should be set to SCS_RESULT_ok. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_REG"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_REG_ALL", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      primary types     1B  (boolean)      secondary types   1B  (boolean)      tertiary types    1B  (boolean)    end;</pre>    <p>    <p>Instructs server to register all known channels.<br> For parameters explanation, refer to <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#ChannelRegisterAll\">TTelemetryRecipient.ChannelRegisterAll</a> method. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_REG_ALL"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_UNREG", "text": "    <p>Sender: Server, Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      name          String  (variable size)      index         4B      (scs_u32_t)      value type    4B      (scs_value_type_t)      result        4B      (scs_result_t)    end;</pre>    <p>    <p>Server:<br> Sent to all clients when given channel is succesfuly unregistered (&quot;result&quot; field set to SCS_RESULT_ok).<br> If unregistration of channel fails, server send this packet back only to unregistering client with &quot;result&quot; field set to result code from unregistration.    <p>Client:<br> Instructs server to unregister a particular channel.<br> &quot;result&quot; field should be set to SCS_RESULT_ok. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_UNREG"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_UNREG_ALL", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to unregister all known channels. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_UNREG_ALL"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_CHANNEL", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      name        String  (variable size)      id          4B      (TChannelID)      index       4B      (scs_u32_t)      value type  4B      (scs_value_type_t)      value       []      (variable size data, actual size depends on value type)    end;</pre>    <p>    <p>Sent to all clients on every game channel callback. &quot;value&quot; field is never empty. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_CHANNEL"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_CHANNEL_BUFFERED", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count   4B  (signed 32bit integer, number of info substructures)      info    substructure[]      begin        name        String  (variable size)        id          4B      (TChannelID)        index       4B      (scs_u32_t)        value type  4B      (scs_value_type_t)        value       []      (variable size data, actual size depends on value type)      end;    end;</pre>    <p>    <p>Sent to all clients on FrameEnd event. Contains all values of all buffered channels.<br> This packet is sent only when server is set to buffer channels. And if so, <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_CHANNEL\">TN_PACKET_CHANNEL_CHANNEL</a> packets are not sent. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_CHANNEL_BUFFERED"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_REGISTERED", "text": "    <p>Sender: Server, Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      name          String  (variable size)      index         4B      (scs_u32_t)      value type    4B      (scs_value_type_t)      registered    1B      (boolean)    end;</pre>    <p>    <p>Server:<br> Sent back to instructing client. Field &quot;registered&quot; contains <code>True</code> when given channel is registered, otherwise <code>False</code>.    <p>Client:<br> Instructs server to check whether given channel is registered.<br> &quot;registered&quot; field can have any value. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_REGISTERED_COUNT_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send number of registered channels. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_COUNT_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_REGISTERED_COUNT", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_COUNT_GET\">TN_PACKET_CHANNEL_REGISTERED_COUNT_GET</a>.<br> Contains number of registered channels. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_COUNT"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_REGISTERED_INDEX_GET", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Instructs server to send registered channel on position given by &quot;index&quot;. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_INDEX_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_REGISTERED_INDEX", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      list index        4B      (signed 32bit integer)      name              String  (variable size)      id                4B      (TChannelID)      index             4B      (scs_u32_t)      value type        4B      (scs_value_type_t)      flags             4B      (scs_u32_t)      index config id   4B      (TItemID)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_INDEX_GET\">TN_PACKET_CHANNEL_REGISTERED_INDEX_GET</a>.<br> Contains information about registered channel on position given by &quot;index&quot; (in <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_INDEX_GET\">TN_PACKET_CHANNEL_REGISTERED_INDEX_GET</a> packet).<br> If &quot;index&quot; in <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_INDEX_GET\">TN_PACKET_CHANNEL_REGISTERED_INDEX_GET</a> pointed to invalid position, then &quot;list index&quot; in this packet is set to -1, field &quot;name&quot; contains an empty string, ud is set to 0, &quot;index&quot; is set to SCS_U32_NIL, &quot;value type&quot; is set to SCS_VALUE_TYPE_INVALID, &quot;flags&quot; is set to SCS_TELEMETRY_CHANNEL_FLAG_none and &quot;index config&quot; to 0. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_INDEX"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_REGISTERED_INDEX_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send all registered events. They are immediately sent as a stream of <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_INDEX\">TN_PACKET_CHANNEL_REGISTERED_INDEX</a> packets. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_INDEX_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_REGISTERED_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send all registered channels. They are all sent in one <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_ALL\">TN_PACKET_CHANNEL_REGISTERED_ALL</a> packet (see below). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_REGISTERED_ALL", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count       4B    (signed 32bit integer, number of info substructures)      info        substructure[]      begin        name              String  (variable size)        id                4B      (TChannelID)        index             4B      (scs_u32_t)        value type        4B      (scs_value_type_t)        flags             4B      (scs_u32_t)        index config id   4B      (TItemID)      end;    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_ALL_GET\">TN_PACKET_CHANNEL_REGISTERED_ALL_GET</a>.<br> Contains array of registered channels informations. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_REGISTERED_ALL"},
     {"title": "TelemetryNetPackets.TN_PACKET_CHANNEL_STORED_SEND_ALL", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send channels stored in recipient. The are sent as a stream ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CHANNEL_STORED_SEND_ALL"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_CONFIG", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      name        String  (variable size)      id          4B      (TConfigID)      index       4B      (scs_u32_t)      value type  4B      (scs_value_type_t)      value       []      (variable size data, actual size depends on value type)    end;</pre>    <p>    <p>Sent to all clients when value of stored config changes or a new config is stored.<br> &quot;value&quot; field is never empty. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_CONFIG"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_STORED", "text": "    <p>Sender: Server, Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      name      String  (variable size)      index     4B      (scs_u32_t)      stored    1B      (boolean)    end;</pre>    <p>    <p>Server:<br> Sent back to instructing client. Field &quot;stored&quot; contains <code>True</code> when given config is stored, otherwise <code>False</code>.    <p>Client:<br> Instructs server to check whether given config is stored.<br> &quot;stored&quot; field can have any value. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_STORED_COUNT_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send number of stored configs. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_COUNT_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_STORED_COUNT", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_COUNT_GET\">TN_PACKET_CONFIG_STORED_COUNT_GET</a>.<br> Contains number of stored configs. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_COUNT"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_STORED_INDEX_GET", "text": "    <p>Sender: Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      index   4B  (signed 32bit integer)    end;</pre>    <p>    <p>Instructs server to send config stored on position given by &quot;index&quot;. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_INDEX_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_STORED_INDEX", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      list index    4B      (signed 32bit integer)      name          String  (variable size)      id            4B      (TConfigID)      index         4B      (scs_u32_t)      value type    4B      (scs_value_type_t)      value         []B     (variable size)      binded        1B      (boolean)    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_INDEX_GET\">TN_PACKET_CONFIG_STORED_INDEX_GET</a>.<br> Contains information about and actual value of stored config on position given by &quot;index&quot; (in <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_INDEX_GET\">TN_PACKET_CONFIG_STORED_INDEX_GET</a> packet).<br> If &quot;index&quot; in <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_INDEX_GET\">TN_PACKET_CONFIG_STORED_INDEX_GET</a> pointed to invalid position, then &quot;list index&quot; in this packet is set to -1, field &quot;name&quot; contains an empty string, &quot;id&quot; is set to 0, &quot;index&quot; is set to SCS_U32_NIL, &quot;value type&quot; is set to SCS_VALUE_TYPE_INVALID, &quot;value&quot; contains one scs_value_t structure with _type set to SCS_VALUE_TYPE_INVALID and &quot;binded&quot; is <code>False</code>. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_INDEX"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_STORED_INDEX_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send all stored configs. They are immediately sent as a stream of <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_INDEX\">TN_PACKET_CONFIG_STORED_INDEX</a> packets. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_INDEX_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_STORED_ALL_GET", "text": "    <p>Sender: Client<br> Packet: Basic    <p>Instructs server to send all stored configs. They are all sent in one <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_ALL\">TN_PACKET_CONFIG_STORED_ALL</a> packet (see below). ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_ALL_GET"},
     {"title": "TelemetryNetPackets.TN_PACKET_CONFIG_STORED_ALL", "text": "    <p>Sender: Server<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      count       4B    (signed 32bit integer, number of info substructures)      info        substructure[]      begin        name          String  (variable size)        id            4B      (TConfigID)        index         4B      (scs_u32_t)        value type    4B      (scs_value_type_t)        value         []B     (variable size)        binded        1B      (boolean)      end;    end;</pre>    <p>    <p>Immediate response to <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_ALL_GET\">TN_PACKET_CONFIG_STORED_ALL_GET</a>.<br> Contains array of stored configs values. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_CONFIG_STORED_ALL"},
     {"title": "TelemetryNetPackets.TN_PACKET_LOG_LOG", "text": "    <p>Sender: Server, Client<br> Packet: Extended </p>    <pre class=\"preformatted\">    begin      log type  4B      (scs_log_type_t)      log text  String  (variable size)    end;</pre>    <p>    <p>Server:<br> Sent to all clients when recipient tries to write to game log.    <p>Client: <br> Instructs server to write to game log using telemetry recipient. ", "tags": "", "loc": "TelemetryNetPackets.html#TN_PACKET_LOG_LOG"},
     {"title": "TelemetryNetPackets.GetPacketIDPrefix", "text": "    ", "tags": "", "loc": "TelemetryNetPackets.html#GetPacketIDPrefix"},
     {"title": "TelemetryNetPackets.GetPacketHeader", "text": " If packet is too small to contain actual valid header, then an exception is raised.    ", "tags": "", "loc": "TelemetryNetPackets.html#GetPacketHeader"},
     {"title": "TelemetryNetPackets.TPacketErrorType", "text": " Any of these errors can be sent with additional error code, but at the moment, only petErrorReadingPacket is sent with it.    <p>          petUnknown An unknown error occured.   petGeneric Generic error (user for errors with known cause but no defined type).   petPacketTooSmall Received packet resolving failed because it was smaller than should be by its definition.   petErrorReadingPacket Reading on received packet failed for some reason (most often returned when received packet was damaged or badly build).  Error code sent with this error contains number of error obtained from GetLastError function.  petUnexpectedPacket Packet that should not be received have arrived (e.g.  packet that has no meaning for receiver).  petUndefinedBehaviour No action is defined for received packet.  This is rather warning than error.  petUnknownPacket Packet with id unknown to recipient was received.   petUnknownClient Administrator requested operation on client that is not connected to the server.   petUnknownParameter Request for unknown parameter have been received.  ", "tags": "", "loc": "TelemetryNetPackets.html#TPacketErrorType"},
     {"title": "TelemetryNetPackets.PPacketBuffer", "text": " ", "tags": "", "loc": "TelemetryNetPackets.html#PPacketBuffer"},
     {"title": "TelemetryNetPackets.TPacketNotifyEvent", "text": "    ", "tags": "", "loc": "TelemetryNetPackets.html#TPacketNotifyEvent"},
     {"title": "TelemetryNetPackets.PPacketHeader", "text": " ", "tags": "", "loc": "TelemetryNetPackets.html#PPacketHeader"},
     {"title": "TelemetryNetPacketsBuilding", "text": "*******************************************************************************        <p><code>TelemetryNetPacketsBuilding</code>    <p>©František Milt, all rights reserved.    <p>Main purpose of this unit is to provide functions that simplifies packets building.<br> There are four function groups and few other (not grouped) functions.<br> The groups are: </p>    <ul class=\"paragraph_spacing\">    <li><p><b>Ptr_* functions</b> - These functions are designed to provide simplified way of writing and reading variables to/from general memory location given by pointer. They are important in packet payload building.<br> All have paramater of type boolean called &quot;Advance&quot;. When this parameter is set to <code>True</code>, passed destination/source pointer is increased by number of bytes written, otherwise this pointer is not changed.</p></li>    <li><p><b>Stream_* functions</b> - These functions are designed to provide simplified way of writing and reading variables to/from streams. They are used in some more complex payload building operations - first the stream is build and then content of this stream is copied into packet as a whole.</p></li>    <li><p><b>BuildPacket functions</b> - Set of functions providing ready-to-be-sent packet buffers. Use them to create packets with zero or one parameter (refer to individual functions ford etails).</p></li>    <li><p><b>BuildPacket_TN_PACKET_* functions</b> - These functions are designed to provide complete, ready-to-be-sent, packets of specific packet IDs. Each function identifier starts with <code>BuildPacket_</code> followed by appropriate packet ID identifier (packet of this ID is returned by such function).<br> Each function has such parameters that are required to build appropriate packet (paramerers for individual functions are not documented as they should be self-explanatory). Refer to packet definition or function implementation for details.</p></li>  </ul>    <p>    <p>Last change: 2013-10-12    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-12 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html"},
     {"title": "TelemetryNetPacketsBuilding.SizeOfPacketString", "text": " When an empty string is passed, only size of string length (UInt32 =&gt; 4Bytes) is returned.    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#SizeOfPacketString"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_WriteString", "text": " Strings are stored as two fields - 32bit signed integer containing length of string in AnsiChars (length of following array), followed by an array of AnsiChars (the string itself, without terminating #0 character). For exmaple, string &quot;ABC.Z&quot; will be store as:<br> </p>    <pre class=\"preformatted\">    05 00 00 00 41 42 43 2E 5A    |- length -|-- string ---|    </pre>    <p>    <p>     Destination Memory location where to write. Must not be <code>Nil</code>. Str String to be written. Advance Indicating whether destination pointer should be increased by number of bytes written. Number of bytes written. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_WriteString"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_ReadString", "text": " Can return an empty string.    <p>     Source Memory location where to read. Must not be <code>Nil</code>. Str Output string variable. Advance Indicating whether source pointer should be increased by number of bytes written. Number of bytes read. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_ReadString"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_WriteInteger", "text": "    <p>     Destination Memory location where to write. Must not be <code>Nil</code>. Value Value to be written. Advance Indicating whether destination pointer should be increased by number of bytes written. Number of bytes written. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_WriteInteger"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_ReadInteger", "text": "    <p>     Source Memory location where to read. Must not be <code>Nil</code>. Value Output variable. Advance Indicating whether source pointer should be increased by number of bytes written. Number of bytes read. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_ReadInteger"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_WriteInt64", "text": "    <p>     Destination Memory location where to write. Must not be <code>Nil</code>. Value Value to be written. Advance Indicating whether destination pointer should be increased by number of bytes written. Number of bytes written. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_WriteInt64"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_ReadInt64", "text": "    <p>     Source Memory location where to read. Must not be <code>Nil</code>. Value Output variable. Advance Indicating whether source pointer should be increased by number of bytes written. Number of bytes read. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_ReadInt64"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_WriteSingle", "text": "    <p>     Destination Memory location where to write. Must not be <code>Nil</code>. Value Value to be written. Advance Indicating whether destination pointer should be increased by number of bytes written. Number of bytes written. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_WriteSingle"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_ReadSingle", "text": "    <p>     Source Memory location where to read. Must not be <code>Nil</code>. Value Output variable. Advance Indicating whether source pointer should be increased by number of bytes written. Number of bytes read. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_ReadSingle"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_WriteDouble", "text": "    <p>     Destination Memory location where to write. Must not be <code>Nil</code>. Value Value to be written. Advance Indicating whether destination pointer should be increased by number of bytes written. Number of bytes written. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_WriteDouble"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_ReadDouble", "text": "    <p>     Source Memory location where to read. Must not be <code>Nil</code>. Value Output variable. Advance Indicating whether source pointer should be increased by number of bytes written. Number of bytes read. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_ReadDouble"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_WriteBoolean", "text": "    <p>     Destination Memory location where to write. Must not be <code>Nil</code>. Value Value to be written. Advance Indicating whether destination pointer should be increased by number of bytes written. Number of bytes written. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_WriteBoolean"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_ReadBoolean", "text": "    <p>     Source Memory location where to read. Must not be <code>Nil</code>. Value Output variable. Advance Indicating whether source pointer should be increased by number of bytes written. Number of bytes read. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_ReadBoolean"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_WriteByte", "text": "    <p>     Destination Memory location where to write. Must not be <code>Nil</code>. Value Value to be written. Advance Indicating whether destination pointer should be increased by number of bytes written. Number of bytes written. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_WriteByte"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_ReadByte", "text": "    <p>     Source Memory location where to read. Must not be <code>Nil</code>. Value Output variable. Advance Indicating whether source pointer should be increased by number of bytes written. Number of bytes read. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_ReadByte"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_WriteBuffer", "text": "    <p>      Destination Memory location where to write. Must not be <code>Nil</code>. Buffer Buffer to be written. Size Size of the buffer in bytes. Advance Indicating whether destination pointer should be increased by number of bytes written. Number of bytes written. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_WriteBuffer"},
     {"title": "TelemetryNetPacketsBuilding.Ptr_ReadBuffer", "text": "    <p>      Destination Memory location where to read. Must not be <code>Nil</code>. Buffer Output buffer. Size Number of bytes to be read. Advance Indicating whether source pointer should be increased by number of bytes written. Number of bytes read. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Ptr_ReadBuffer"},
     {"title": "TelemetryNetPacketsBuilding.Stream_WriteString", "text": " Strings are writen in the same manner as in <a class=\"normal\" href=\"TelemetryNetPacketsBuilding.html#Ptr_WriteString\">Ptr_WriteString</a> function.    <p>    Stream Stream to which the value will be written. Must not be <code>Nil</code>. Str Value to be written. Number of bytes written. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Stream_WriteString"},
     {"title": "TelemetryNetPacketsBuilding.Stream_ReadString", "text": "    <p>    Stream Stream from which the value will be read. Must not be <code>Nil</code>. Str Output value. Number of bytes read. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Stream_ReadString"},
     {"title": "TelemetryNetPacketsBuilding.Stream_WriteInteger", "text": "    <p>    Stream Stream to which the value will be written. Must not be <code>Nil</code>. Value Value to be written. Number of bytes written. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Stream_WriteInteger"},
     {"title": "TelemetryNetPacketsBuilding.Stream_ReadInteger", "text": "    <p>    Stream Stream from which the value will be read. Must not be <code>Nil</code>. Str Output value. Number of bytes read. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Stream_ReadInteger"},
     {"title": "TelemetryNetPacketsBuilding.Stream_WriteBuffer", "text": "    <p>     Stream Stream to which the value will be written. Must not be <code>Nil</code>. Buffer Buffer to be written. Size Size of the buffer in bytes. Number of bytes written. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Stream_WriteBuffer"},
     {"title": "TelemetryNetPacketsBuilding.Stream_ReadBuffer", "text": "    <p>     Stream Stream from which the value will be read. Must not be <code>Nil</code>. Buffer Output buffer. Size Number of bytes to be read. Number of bytes read. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#Stream_ReadBuffer"},
     {"title": "TelemetryNetPacketsBuilding.PreparePacket", "text": " It expects the field &quot;Size&quot; in &quot;Packet&quot; parameter to be set to size the packet will have (if it is set to value lower than <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_MIN_PACKET_SIZE\">TN_MIN_PACKET_SIZE</a>, then an exception is raised). &quot;Data&quot; field of &quot;Packet&quot; parameter must not be initialized, since it will be initialized in this function (to size passed in Packet.Size). Function also fills all information in packet header.    <p>     <p>  Packet Packet that has to be initialized in this routine. PacketID ID of initialized packet. Pointer that points to beginning of packet payload (when packet has no payload, it point to the end of packet). ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#PreparePacket"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket", "text": "    <p>   PacketID ID of created packet. Initialized ready-to-be-sent packet. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket", "text": "    <p>    PacketID ID of created packet. Data Packet payload. Initialized ready-to-be-sent packet. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket", "text": "    <p>    PacketID ID of created packet. Data Packet payload. Initialized ready-to-be-sent packet. ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_PING", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_PING"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_PING_RESPONSE", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_PING_RESPONSE"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_HI", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_HI"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_VERSION", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_VERSION"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_TELEMETRY_VERSION_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_TELEMETRY_VERSION_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_TELEMETRY_VERSION", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_TELEMETRY_VERSION"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_READY", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_READY"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_PARAM_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_PARAM_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_PARAM", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_PARAM"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_PARAM", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_PARAM"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_PARAM", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_PARAM"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_PARAM", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_PARAM"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_BYE", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_BYE"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_MESSAGE", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_MESSAGE"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_PACKET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_PACKET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_RIGHTS_ADMIN_REQUEST", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_RIGHTS_ADMIN_REQUEST"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_RIGHTS_ADMIN", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_RIGHTS_ADMIN"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ERROR", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ERROR"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_RIGHTS_SUPERADMIN_REQUEST", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_RIGHTS_SUPERADMIN_REQUEST"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_RIGHTS_SUPERADMIN", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_RIGHTS_SUPERADMIN"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CLIENT_CONNECTING", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CLIENT_CONNECTING"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CLIENT_REJECTED", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CLIENT_REJECTED"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CLIENT_CONNECTED", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CLIENT_CONNECTED"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CLIENT_DISCONNECTED", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CLIENT_DISCONNECTED"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CLIENT_CHANGE", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CLIENT_CHANGE"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CLIENT_OPERATION", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CLIENT_OPERATION"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CLIENT_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CLIENT_COUNT_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CLIENT_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CLIENT_COUNT"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CLIENT_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CLIENT_INDEX_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CLIENT_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CLIENT_INDEX"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CLIENT_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CLIENT_INDEX_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CLIENT_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CLIENT_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CLIENT_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CLIENT_ALL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_COUNT_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_COUNT"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_INDEX_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_INDEX"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_INDEX_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_ALL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_CLEAR", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_CLEAR"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_ADD", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_ADD"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_REMOVE", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_REMOVE"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_DELETE", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_DELETE"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_RELOAD", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_RELOAD"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_SAVE", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_SAVE"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_LIST_CHANGE", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_LIST_CHANGE"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_SEND_MESSAGE", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_SEND_MESSAGE"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_PASSWORD", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_PASSWORD"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_CHANGE_PASSWORD", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_CHANGE_PASSWORD"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_PARAM_SET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_PARAM_SET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_PARAM_SET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_PARAM_SET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_PARAM_SET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_PARAM_SET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_ADMIN_PARAM_SET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_ADMIN_PARAM_SET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_SUPERADMIN_ADMIN_PASSWORD", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_SUPERADMIN_ADMIN_PASSWORD"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_SUPERADMIN_CHANGE_ADMIN_PASSWORD", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_SUPERADMIN_CHANGE_ADMIN_PASSWORD"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_KNOWN_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_KNOWN_COUNT_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_KNOWN_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_KNOWN_COUNT"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_KNOWN_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_KNOWN_INDEX_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_KNOWN_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_KNOWN_INDEX"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_KNOWN_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_KNOWN_INDEX_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_KNOWN_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_KNOWN_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_KNOWN_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_KNOWN_ALL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_KNOWN_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_KNOWN_COUNT_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_KNOWN_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_KNOWN_COUNT"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_KNOWN_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_KNOWN_INDEX_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_KNOWN_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_KNOWN_INDEX"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_KNOWN_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_KNOWN_INDEX_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_KNOWN_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_KNOWN_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_KNOWN_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_KNOWN_ALL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_KNOWN_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_KNOWN_COUNT_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_KNOWN_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_KNOWN_COUNT"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_KNOWN_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_KNOWN_INDEX_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_KNOWN_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_KNOWN_INDEX"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_KNOWN_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_KNOWN_INDEX_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_KNOWN_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_KNOWN_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_KNOWN_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_KNOWN_ALL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_REG", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_REG"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_REG_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_REG_ALL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_UNREG", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_UNREG"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_UNREG_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_UNREG_ALL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_EVENT", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_EVENT"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_EVENT", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_EVENT"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_REGISTERED", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_REGISTERED"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_REGISTERED_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_REGISTERED_COUNT_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_REGISTERED_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_REGISTERED_COUNT"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_REGISTERED_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_REGISTERED_INDEX_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_REGISTERED_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_REGISTERED_INDEX"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_REGISTERED_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_REGISTERED_INDEX_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_REGISTERED_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_REGISTERED_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_EVENT_REGISTERED_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_EVENT_REGISTERED_ALL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_REG", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_REG"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_REG_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_REG_ALL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_UNREG", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_UNREG"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_UNREG_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_UNREG_ALL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_CHANNEL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_CHANNEL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_CHANNEL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_CHANNEL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_CHANNEL_BUFFERED", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_CHANNEL_BUFFERED"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_REGISTERED", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_REGISTERED"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_REGISTERED_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_REGISTERED_COUNT_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_REGISTERED_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_REGISTERED_COUNT"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_REGISTERED_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_REGISTERED_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_REGISTERED_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_REGISTERED_ALL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CHANNEL_STORED_SEND_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CHANNEL_STORED_SEND_ALL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_CONFIG", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_CONFIG"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_STORED", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_STORED"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_STORED_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_STORED_COUNT_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_STORED_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_STORED_COUNT"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_STORED_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_STORED_INDEX_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_STORED_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_STORED_INDEX"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_STORED_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_STORED_INDEX_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_STORED_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_STORED_ALL_GET"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_CONFIG_STORED_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_CONFIG_STORED_ALL"},
     {"title": "TelemetryNetPacketsBuilding.BuildPacket_TN_PACKET_LOG_LOG", "text": "    ", "tags": "", "loc": "TelemetryNetPacketsBuilding.html#BuildPacket_TN_PACKET_LOG_LOG"},
     {"title": "TelemetryNetPacketsResolving", "text": "*******************************************************************************        <p><code>TelemetryNetPacketsResolving</code>    <p>©František Milt, all rights reserved.    <p>This unit is designated to provide functions that simplifies packets reading and processing.<br> There are three function groups and few other (not grouped) functions.<br> The groups are: </p>    <ul class=\"paragraph_spacing\">    <li><p><b>ReusePacket functions</b> - Functions intended to provide a way to reuse allready created packets (reducimg memory allocation). For example, you can change ID of just received packet and send it back as response.</p></li>    <li><p><b>Ptr_Readout* functions</b> - Functions designed to provide simple way of reading variables from general memory location given by pointer. Read value is returned as function result.</p></li>    <li><p><b>Payload_Readout* functions</b> - These functions read value from payload of given packet. They all have paramter &quot;Offset&quot;, which tells the function offset in bytes from the beginning of packet payload at which function should start reading. When the offset is not specified, function reads right at the beginning of payload.</p></li>  </ul>    <p>    <p>Last change: 2013-10-13    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-13 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryNetPacketsResolving.html"},
     {"title": "TelemetryNetPacketsResolving.GetPayloadAddress", "text": "    Packet Packet from which the payload address is requested. Address of payload of given packet. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#GetPayloadAddress"},
     {"title": "TelemetryNetPacketsResolving.MinimalPacketPayloadSize", "text": " Each packets payload must have minimal size given by its structure. This function returns this size for each packet type - if unknown packet type ID is passed, an exception is raised.<br> This function should be used to check received packet before further processing.<br> For actual values, refer to function implementation.    PacketID ID of packet type for ehich the minimum size is required. Minimal size of payload for given packet ID. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#MinimalPacketPayloadSize"},
     {"title": "TelemetryNetPacketsResolving.CheckPacketPayloadSize", "text": "    Packet Packet whose payload size will be checked. <code>True</code> when packet payload is large enough, <code>False</code> when it is too small. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#CheckPacketPayloadSize"},
     {"title": "TelemetryNetPacketsResolving.ReusePacket", "text": "    Packet Packet whose id should be changed. NewPacketID New packet ID to be written to passed packet.  ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#ReusePacket"},
     {"title": "TelemetryNetPacketsResolving.ReusePacket", "text": " Data are store at position given by offset from packet payload beginning. When data would not fit into packet, an exception is raised.       Packet Packet to be changed. NewPacketID New packet ID to be written to passed packet. DataOffset Position offset from payload beginning where to write data. DataSize Size of data to be written. Data Data to be writen to packet.  ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#ReusePacket"},
     {"title": "TelemetryNetPacketsResolving.Ptr_ReadoutString", "text": "     Source Memory location where to read. Must not be <code>Nil</code>. Advance Indicating whether source pointer should be increased by number of bytes read. Read string. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Ptr_ReadoutString"},
     {"title": "TelemetryNetPacketsResolving.Ptr_ReadoutInteger", "text": "     Source Memory location where to read. Must not be <code>Nil</code>. Advance Indicating whether source pointer should be increased by number of bytes read. Read integer value. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Ptr_ReadoutInteger"},
     {"title": "TelemetryNetPacketsResolving.Ptr_ReadoutInt64", "text": "     Source Memory location where to read. Must not be <code>Nil</code>. Advance Indicating whether source pointer should be increased by number of bytes read. Read integer value. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Ptr_ReadoutInt64"},
     {"title": "TelemetryNetPacketsResolving.Ptr_ReadoutSingle", "text": "     Source Memory location where to read. Must not be <code>Nil</code>. Advance Indicating whether source pointer should be increased by number of bytes read. Read floating point value. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Ptr_ReadoutSingle"},
     {"title": "TelemetryNetPacketsResolving.Ptr_ReadoutDouble", "text": "     Source Memory location where to read. Must not be <code>Nil</code>. Advance Indicating whether source pointer should be increased by number of bytes read. Read floating point value. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Ptr_ReadoutDouble"},
     {"title": "TelemetryNetPacketsResolving.Ptr_ReadoutBoolean", "text": "     Source Memory location where to read. Must not be <code>Nil</code>. Advance Indicating whether source pointer should be increased by number of bytes read. Read boolean value. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Ptr_ReadoutBoolean"},
     {"title": "TelemetryNetPacketsResolving.Ptr_ReadoutByte", "text": "     Source Memory location where to read. Must not be <code>Nil</code>. Advance Indicating whether source pointer should be increased by number of bytes read. Read byte value. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Ptr_ReadoutByte"},
     {"title": "TelemetryNetPacketsResolving.Payload_ReadoutString", "text": "     Packet Packet from which the value should be read. Offset Position from payload start where to read. Read string. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Payload_ReadoutString"},
     {"title": "TelemetryNetPacketsResolving.Payload_ReadoutInteger", "text": "     Packet Packet from whitch the value should be read. Offset Position from payload start where to read. Read integer value. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Payload_ReadoutInteger"},
     {"title": "TelemetryNetPacketsResolving.Payload_ReadoutInt64", "text": "     Packet Packet from which the value should be read. Offset Position from payload start where to read. Read integer value. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Payload_ReadoutInt64"},
     {"title": "TelemetryNetPacketsResolving.Payload_ReadoutSingle", "text": "     Packet Packet from which the value should be read. Offset Position from payload start where to read. Read floating point value. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Payload_ReadoutSingle"},
     {"title": "TelemetryNetPacketsResolving.Payload_ReadoutDouble", "text": "     Packet Packet from which the value should be read. Offset Position from payload start where to read. Read floating point value. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Payload_ReadoutDouble"},
     {"title": "TelemetryNetPacketsResolving.Payload_ReadoutBoolean", "text": "     Packet Packet from which the value should be read. Offset Position from payload start where to read. Read boolean value. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Payload_ReadoutBoolean"},
     {"title": "TelemetryNetPacketsResolving.Payload_ReadoutByte", "text": "     Packet Packet from which the value should be read. Offset Position from payload start where to read. Read byte value. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#Payload_ReadoutByte"},
     {"title": "TelemetryNetPacketsResolving.PacketEventConfigurationToStr", "text": " It is intended as replacement for function <a class=\"normal\" href=\"TelemetryRecipientAux.html#TelemetryEventConfigurationToStr\">TelemetryRecipientAux.TelemetryEventConfigurationToStr</a>, because structure of payload in mentioned packet differs form structure passed by configuration event.    <p>      <p>  Data Pointer to packet payload. Type name When set, value type identifiers for individual attribute values are added to output. ShowDescriptors When set, fileds descriptors are shown in component values. Textual representation of given packet payload. ", "tags": "", "loc": "TelemetryNetPacketsResolving.html#PacketEventConfigurationToStr"},
     {"title": "TelemetryNetServer", "text": "*******************************************************************************        <p><code>TelemetryNetServer</code>    <p>©František Milt, all rights reserved.    <p>This unit contains <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html\">TTelemetryNetServer</a> class used as telemetry server (see class declaration for details).    <p>Included files:</p>    <pre class=\"preformatted\">      .\\INC\\TTelemetryNetServer.ProcessPacket_TN_PACKET.pas</pre>    <p>    <p>Last change: 2013-10-13    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-13 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryNetServer.html"},
     {"title": "TelemetryNetServer.TTelemetryNetServer", "text": " Telemetry server runs inside of telemetry plugin (library) and is intended to provide communication interface between client application(s) and telemetry API (with help of telemetry recipient). It is designed using windows sockets and thus can communicate through any network supporting TCP/IP protocol (Ethernet, Internet, ...).<br> Communication between server and client(s) is realized using variable length packets - see unit <a class=\"normal\" href=\"TelemetryNetPackets.html\">TelemetryNetPackets</a> for details.    <p><b>Note:</b> event hadlers dont have documented parameters, instead a link to event they are handling is provided where possible. Refer to this link for required informations.    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>Methods starting with <code>ProcessPacketGroup_</code> and <code>ProcessPacket_</code> all have following two parameters (they are therefore not documented for each individual method): </p>    <ul class=\"compact_spacing\">    <li><p><b>Packet</b> - Packet that has to be processed by given method.</p></li>    <li><p><b>Socket</b> - Endpoint client socket that has received processed packet. It is used when processed packet requires a respond to be sent back to the sender.</p></li>  </ul>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>All <code>ProcessPacket_*</code> methods are intended to process individual packet. Which packet they process can be differentiated by method name. Name of each method contains full packet ID identifier.<br> For details about individual method behavior, you have to refer to method implementation (complete documentation would be too extensive).    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fAddressList", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fAddressList"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fServerSocket", "text": " It is delphi-specific socket wrapper.<br> Methods of this object are used to send and receive data to/from connection. Also, some events of this object are handled by designated server methods (<a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#OnClientConnectHandler\">OnClientConnectHandler</a>, <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#OnClientDisconnectHandler\">OnClientDisconnectHandler</a>, <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#OnClientErrorHandler\">OnClientErrorHandler</a>, <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#OnClientReadHandler\">OnClientReadHandler</a>, <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#OnClientWriteHandler\">OnClientWriteHandler</a>, <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#OnGetSocketHandler\">OnGetSocketHandler</a>).<br> <b>Note:</b> - internal socket endpoint objects are of specialized class (see <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#OnGetSocketHandler\">OnGetSocketHandler</a> method). ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fServerSocket"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fBufferedChannels", "text": " It is there to minimize flood of <a class=\"normal\" href=\"TelemetryNetPackets.html#TN_PACKET_CHANNEL_CHANNEL\">TN_PACKET_CHANNEL_CHANNEL</a> packets that will otherwise occur (at extreme cases, over 15000 packets can be sent in one second). ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fBufferedChannels"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fTelemetryRecipient", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fTelemetryRecipient"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fDefferedOperations", "text": " event registration) cannot be executed any time, but only in telemetry callbacks. But from nature of network comunnication, they can be requested pretty much any time. When request for such operation arriwes, it is stored with its parameters into this object. Later, when these operations can be executed (generally when telemetry event is received), they are performed and removed from buffer.<br> This system requires that telemetry events are regularly received. Therefore it does not work if no event is registered - but, in this system, no event can be registered outside of event callback. To resolve this problem, telemetry recipient must be created with <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#KeepUtilityEvents\">KeepUtilityEvents</a> property set to <code>True</code> (default settings). ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fDefferedOperations"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fPassword", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fPassword"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fAdminPassword", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fAdminPassword"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fSuperAdminPassword", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fSuperAdminPassword"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fSendEvents", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fSendEvents"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fSendChannels", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fSendChannels"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fSendConfigs", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fSendConfigs"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fBufferChannels", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fBufferChannels"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fSendFrameEvents", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fSendFrameEvents"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fSaveSettingsToFile", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fSaveSettingsToFile"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnClientConnect", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnClientConnect"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnClientDisconnect", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnClientDisconnect"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnClientError", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnClientError"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnClientRead", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnClientRead"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnClientWrite", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnClientWrite"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnGetSocket", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnGetSocket"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnStatusChange", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnStatusChange"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnPacketDrop", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnPacketDrop"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnOverflowClear", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnOverflowClear"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnPacketReceived", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnPacketReceived"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnPacketSending", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnPacketSending"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnPacketSend", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnPacketSend"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnLog", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnLog"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnEventRegister", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnEventRegister"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnEventUnregister", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnEventUnregister"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnEvent", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnEvent"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnChannelRegister", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnChannelRegister"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnChannelUnregister", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnChannelUnregister"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnChannel", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnChannel"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnChannelBuffering", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnChannelBuffering"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnConfig", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnConfig"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.fOnDestroy", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#fOnDestroy"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.GetConnectedClientsCount", "text": "    Number of connected clients. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#GetConnectedClientsCount"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.GetListenPort", "text": "    Port at which the server is listening. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#GetListenPort"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.GetBufferedChannelsCount", "text": "    Number of channels buffered. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#GetBufferedChannelsCount"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.GetDefferedOperationsCount", "text": "    Number of deffered operations. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#GetDefferedOperationsCount"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.GetServerVersion", "text": "    Server version. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#GetServerVersion"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetPassword", "text": "   Value New value to be stored in <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fPassword\">fPassword</a> field.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetPassword"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetAdminPassword", "text": "   Value New value to be stored in <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fAdminPassword\">fAdminPassword</a> field.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetAdminPassword"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetSuperAdminPassword", "text": "   Value New value to be stored in <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fSuperAdminPassword\">fSuperAdminPassword</a> field.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetSuperAdminPassword"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetSendEvents", "text": "   Value New value to be stored in <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fSendEvents\">fSendEvents</a> field.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetSendEvents"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetSendChannels", "text": "   Value New value to be stored in <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fSendChannels\">fSendChannels</a> field.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetSendChannels"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetSendConfigs", "text": "   Value New value to be stored in <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fSendConfigs\">fSendConfigs</a> field.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetSendConfigs"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.GetActiveMode", "text": "    <code>True</code> when <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#SendEvents\">SendEvents</a>, <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#SendChannels\">SendChannels</a> and <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#SendConfigs\">SendConfigs</a> are all <code>True</code>, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#GetActiveMode"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetActiveMode", "text": "  Value Value to be stored in <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fSendEvents\">fSendEvents</a>, <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fSendChannels\">fSendChannels</a> and <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fSendConfigs\">fSendConfigs</a> fields.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetActiveMode"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetBufferChannels", "text": "   Value New value to be stored in <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fBufferChannels\">fBufferChannels</a> field.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetBufferChannels"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetSendFrameEvents", "text": "   Value New value to be stored in <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fSendFrameEvents\">fSendFrameEvents</a> field.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetSendFrameEvents"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.GetOnAccept", "text": "    Handler of fServerSocker.OnAccept event. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#GetOnAccept"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetOnAccept", "text": "   Value New handler for fServerSocker.OnAccept event. Can be <code>Nil</code>.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetOnAccept"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.GetOnListen", "text": "    Handler of fServerSocker.OnListen event. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#GetOnListen"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetOnListen", "text": "   Value New handler for fServerSocker.OnListen event. Can be <code>Nil</code>.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetOnListen"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.GetOnGetThread", "text": "    Handler of fServerSocker.OnGetThread event. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#GetOnGetThread"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetOnGetThread", "text": "   Value New handler for fServerSocker.OnGetThread event. Can be <code>Nil</code>.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetOnGetThread"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.GetOnThreadEnd", "text": "    Handler of fServerSocker.OnThreadEnd event. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#GetOnThreadEnd"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetOnThreadEnd", "text": "   Value New handler for fServerSocker.OnThreadEnd event. Can be <code>Nil</code>.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetOnThreadEnd"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.GetOnThreadStart", "text": "    Handler of fServerSocker.OnThreadStart event. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#GetOnThreadStart"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SetOnThreadStart", "text": "   Value New handler for fServerSocker.OnThreadStart event. Can be <code>Nil</code>.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SetOnThreadStart"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnAddressListChangeHandler", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnAddressListChangeHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnClientConnectHandler", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnClientConnectHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnClientDisconnectHandler", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnClientDisconnectHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnClientErrorHandler", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnClientErrorHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnClientReadHandler", "text": " Received data are read to buffer and then passed to incoming stream object belinging to appropriate endpoint socket object. Stream object then handles this data and further process then to get valid packets.    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnClientReadHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnClientWriteHandler", "text": " Thes method peeks and tries to write packets stored in outgoing buffer belonging to calling socket. When buffered packet is successfuly written, it is removed from buffer and next stored packet is attempted to be written until all stored packkets are send (written) or socket signals that it cannot send more data.    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnClientWriteHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnGetSocketHandler", "text": " This method ensures the newly created endpoint socket will be of <a class=\"normal\" href=\"TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html\">TTelemetryNetServerClientWinSocket</a> class and assigns its event handlers.    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnGetSocketHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnStatusChangeHandler", "text": " It is assigned as handler of mentioned event for all endpoint client sockets.<br> Called when client socket changes its status.    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnStatusChangeHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnPacketDropHandler", "text": " Assigned as handler for all clients.<br> Called when client's outgoing buffer must drop old packet to make room for a new one.    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnPacketDropHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnOverflowClearHandler", "text": " Assigned as handler for all clients.<br> Called just before client's incoming stream buffer clears itself.    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnOverflowClearHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnPacketHandler", "text": " Assigned as handler for all clients.<br> Called when client's incoming stream passes new incoming packet. This method takes passed packet, look on its ID and, depending on packet ID prefix, passes it to one of packet group processing methods (only when client endpoint can receive such packet, refer to method implementation for details).    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnPacketHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnLogHandler", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnLogHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnEventRegisterHandler", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnEventRegisterHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnEventUnregisterHandler", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnEventUnregisterHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnEventHandler", "text": " This method processes passed event data and, depending on server settings, send it to clients.    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnEventHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnChannelRegisterHandler", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnChannelRegisterHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnChannelUnregisterHandler", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnChannelUnregisterHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnChannelHandler", "text": " This method processes passed channel and, depending on server settings, send it to clients or buffers it.    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnChannelHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnConfigHandler", "text": " This method processes passed configuration and, depending on server settings, send it to clients.    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnConfigHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnDestroyHandler", "text": " When this method is called, it forces server instance to <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#Destroy\">destroy</a> itself, as server cannot run without recipient.    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnDestroyHandler"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacketGroup_COMMON", "text": "    <code>True</code> when packet is successfuly processed, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacketGroup_COMMON"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacketGroup_ADMIN", "text": "    <code>True</code> when packet is successfuly processed, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacketGroup_ADMIN"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacketGroup_SUPERADMIN", "text": "    <code>True</code> when packet is successfuly processed, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacketGroup_SUPERADMIN"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacketGroup_EVENT_KNOWN", "text": "    <code>True</code> when packet is successfuly processed, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacketGroup_EVENT_KNOWN"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacketGroup_CHANNEL_KNOWN", "text": "    <code>True</code> when packet is successfuly processed, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacketGroup_CHANNEL_KNOWN"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacketGroup_CONFIG_KNOWN", "text": "    <code>True</code> when packet is successfuly processed, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacketGroup_CONFIG_KNOWN"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacketGroup_EVENT", "text": "    <code>True</code> when packet is successfuly processed, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacketGroup_EVENT"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacketGroup_CHANNEL", "text": "    <code>True</code> when packet is successfuly processed, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacketGroup_CHANNEL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacketGroup_CONFIG", "text": "    <code>True</code> when packet is successfuly processed, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacketGroup_CONFIG"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacketGroup_LOG", "text": "    <code>True</code> when packet is successfuly processed, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacketGroup_LOG"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_PING", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_PING"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_PING_RESPONSE", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_PING_RESPONSE"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_HI", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_HI"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_VERSION", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_VERSION"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_TELEMETRY_VERSION_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_TELEMETRY_VERSION_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_TELEMETRY_VERSION", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_TELEMETRY_VERSION"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_READY", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_READY"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_PARAM_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_PARAM_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_PARAM", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_PARAM"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_BYE", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_BYE"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_MESSAGE", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_MESSAGE"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_PACKET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_PACKET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_RIGHTS_ADMIN_REQUEST", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_RIGHTS_ADMIN_REQUEST"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_RIGHTS_ADMIN", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_RIGHTS_ADMIN"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ERROR", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ERROR"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_RIGHTS_SUPERADMIN_REQUEST", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_RIGHTS_SUPERADMIN_REQUEST"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_RIGHTS_SUPERADMIN", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_RIGHTS_SUPERADMIN"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CLIENT_CONNECTING", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_CONNECTING"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CLIENT_REJECTED", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_REJECTED"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CLIENT_CONNECTED", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_CONNECTED"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CLIENT_DISCONNECTED", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_DISCONNECTED"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CLIENT_CHANGE", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_CHANGE"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CLIENT_OPERATION", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_OPERATION"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CLIENT_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_COUNT_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CLIENT_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_COUNT"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CLIENT_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_INDEX_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CLIENT_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_INDEX"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CLIENT_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_INDEX_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CLIENT_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CLIENT_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CLIENT_ALL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_COUNT_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_COUNT"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_INDEX_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_INDEX"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_INDEX_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_ALL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_CLEAR", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_CLEAR"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_ADD", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_ADD"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_REMOVE", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_REMOVE"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_DELETE", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_DELETE"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_RELOAD", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_RELOAD"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_SAVE", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_SAVE"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_LIST_CHANGE", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_LIST_CHANGE"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_SEND_MESSAGE", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_SEND_MESSAGE"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_PASSWORD", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_PASSWORD"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_CHANGE_PASSWORD", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_CHANGE_PASSWORD"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_ADMIN_PARAM_SET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_ADMIN_PARAM_SET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_SUPERADMIN_ADMIN_PASSWORD", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_SUPERADMIN_ADMIN_PASSWORD"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_SUPERADMIN_CHANGE_ADMIN_PASSWORD", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_SUPERADMIN_CHANGE_ADMIN_PASSWORD"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_KNOWN_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_COUNT_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_KNOWN_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_COUNT"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_KNOWN_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_INDEX_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_KNOWN_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_INDEX"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_KNOWN_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_INDEX_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_KNOWN_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_KNOWN_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_KNOWN_ALL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_COUNT_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_COUNT"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_INDEX_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_INDEX"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_INDEX_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_KNOWN_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_KNOWN_ALL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_KNOWN_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_COUNT_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_KNOWN_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_COUNT"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_KNOWN_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_INDEX_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_KNOWN_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_INDEX"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_KNOWN_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_INDEX_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_KNOWN_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_KNOWN_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_KNOWN_ALL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_REG", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_REG"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_REG_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_REG_ALL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_UNREG", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_UNREG"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_UNREG_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_UNREG_ALL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_EVENT", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_EVENT"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_REGISTERED", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_REGISTERED_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_COUNT_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_REGISTERED_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_COUNT"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_REGISTERED_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_INDEX_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_REGISTERED_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_INDEX"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_REGISTERED_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_INDEX_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_REGISTERED_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_EVENT_REGISTERED_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_EVENT_REGISTERED_ALL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_REG", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_REG"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_REG_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_REG_ALL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_UNREG", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_UNREG"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_UNREG_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_UNREG_ALL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_CHANNEL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_CHANNEL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_CHANNEL_BUFFERED", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_CHANNEL_BUFFERED"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_COUNT_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_COUNT"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_INDEX_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_REGISTERED_ALL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CHANNEL_STORED_SEND_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CHANNEL_STORED_SEND_ALL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_CONFIG", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_CONFIG"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_STORED", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_STORED"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_STORED_COUNT_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_STORED_COUNT_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_STORED_COUNT", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_STORED_COUNT"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_STORED_INDEX_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_STORED_INDEX_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_STORED_INDEX", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_STORED_INDEX"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_STORED_INDEX_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_STORED_INDEX_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_STORED_ALL_GET", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_STORED_ALL_GET"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_CONFIG_STORED_ALL", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_CONFIG_STORED_ALL"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ProcessPacket_TN_PACKET_LOG_LOG", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ProcessPacket_TN_PACKET_LOG_LOG"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.GetClient", "text": "    <p>  client is not found (is not connected).  ClientID ID of requested client. Reference to endpoint socket object for requested client, <code>Nil</code> when ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#GetClient"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SendBufferedChannels", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SendBufferedChannels"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ExecuteDefferedOperations", "text": " They are executed in the same order as they arrived. See <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fDefferedOperations\">fDefferedOperations</a> for details.    <p>  CallingEvent Telemetry event that has induced call to this method. For details, refer to method implementation.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ExecuteDefferedOperations"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SendTo", "text": "    <p>    Socket Endpoint client socket to which the packet will be send. Must not be <code>Nil</code>. Packet Packet to be sent. FreePacket When set to <code>True</code>, then packet (packet memory image) should be freed after packet is sent. When packet gets buffered, and this parameter is <code>True</code>, then only reference is buffered and packet is not freed (it is freed later when removed from buffer).<br> When <code>False</code> and packet must be buffered, then packet is copied in buffer.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SendTo"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SendToAll", "text": "    <p>   Packet Packet to be sent. FreePacket When set to <code>True</code>, then packet (packet memory image) should be freed after packet is sent.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SendToAll"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SendServerSettings", "text": "    <p>   ParameterID ID of settings parameter to be sent. When set to <code>pidAll</code>, then all known parameters are sent. Socket Endpoint socket of client to which the parameter should be sent. When set to <code>Nil</code>, the parameter is sent to all connected clients.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SendServerSettings"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.DisconnectClient", "text": "    <p>   Socket Endpoint socket of client that will be disconnected. Reason Reason why the client will be disconnected. See <a class=\"normal\" href=\"TelemetryNetCommon.html#TDisconnectReason\">TDisconnectReason</a> for possible values.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#DisconnectClient"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.DisconnectAllClients", "text": "    <p>    Reason Reason why the client will be disconnected. See <a class=\"normal\" href=\"TelemetryNetCommon.html#TDisconnectReason\">TDisconnectReason</a> for possible values. OnlyAdmins Only administrators get disconnected. OnlySuperAdmins Only super-administrators get disconnected.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#DisconnectAllClients"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.LoadSettings", "text": " See <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#SaveSettingsToFile\">SaveSettingsToFile</a> property for details.    <p> file does not exists).   <code>True</code> when loaded successfuly, <code>False</code> otherwise (e.g. when settings ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#LoadSettings"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SaveSettings", "text": " See <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#SaveSettingsToFile\">SaveSettingsToFile</a> property for details.    <p>   <code>True</code> when saved successfuly, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SaveSettings"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.Create", "text": "    <p>   aTelemetryRecipient Pre-created telemetry recipient. Port Port at which the server will listen for incoming connections.  ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#Create"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.Destroy", "text": "    ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#Destroy"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.AddressList", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#AddressList"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ConnectedClientsCount", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ConnectedClientsCount"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ListenPort", "text": " It is set in constructor and cannot be changed later. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ListenPort"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.BufferedChannelsCount", "text": " See <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fBufferedChannels\">fBufferedChannels</a> object for details. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#BufferedChannelsCount"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.TelemetryRecipient", "text": " This object must be created outside of server (before the server is created), because it is passed to server constructor.<br> Server binds recipients <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#OnDestroy\">OnDestroy</a> event (in fact, server binds all recipient events), and when recipient is destroyed, server destroys itself too. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#TelemetryRecipient"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.DefferedOperationsCount", "text": " See <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#fDefferedOperations\">fDefferedOperations</a> for details. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#DefferedOperationsCount"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ServerVersion", "text": " High word of this value is major version and low word is minor version. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ServerVersion"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.Password", "text": " All clients must log in with this password when connecting, otherwise they are rejected and immediately disconnected. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#Password"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.AdminPassword", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#AdminPassword"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SuperAdminPassword", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SuperAdminPassword"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SendEvents", "text": " When set to <code>True</code>, events are sent. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SendEvents"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SendChannels", "text": " When set to <code>True</code>, channels are sent. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SendChannels"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SendConfigs", "text": " When set to <code>True</code>, configs are sent. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SendConfigs"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.ActiveMode", "text": " It is a composite property depending on <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#SendEvents\">SendEvents</a>, <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#SendChannels\">SendChannels</a> and <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#SendConfigs\">SendConfigs</a> properties. Active mode is <code>True</code> only when all componnets are <code>True</code>. When you set new value to this property, all components are set to his value too. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#ActiveMode"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.BufferChannels", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#BufferChannels"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SendFrameEvents", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SendFrameEvents"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.SaveSettingsToFile", "text": " Also, address list is saved.<br> This file is located in the same folder as executable/library in which the server runs. At the moment, file name is &quot;TelemetryNetServer.ini&quot;, but can be changed in future versions (name of file with address list can be set by user, but by default is &quot;address.list.txt&quot;). ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#SaveSettingsToFile"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnAccept", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnAccept"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnListen", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnListen"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnClientConnect", "text": " Is called before actual client connection is processed, meaning client can be forced to disconnect right after this event.<br> Called from fServerSocket.OnClientConnect event <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#OnClientConnectHandler\">handler method</a>. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnClientConnect"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnClientDisconnect", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnClientDisconnect"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnClientError", "text": " This event is called <b>before</b> the error is handled by server.<br> Called from fServerSocket.OnClientError event <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#OnClientErrorHandler\">handler method</a>. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnClientError"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnClientRead", "text": " Called before actual reading takes place.<br> Called from fServerSocket.fOnClientRead event <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#OnClientReadHandler\">handler method</a>. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnClientRead"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnClientWrite", "text": " Called after data are written.<br> Called from fServerSocket.fOnClientWrite event <a class=\"normal\" href=\"TelemetryNetServer.TTelemetryNetServer.html#OnClientWriteHandler\">handler method</a>. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnClientWrite"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnGetSocket", "text": " So when you assign this event, you are responsible to to take all necessary actions (creating endpoint socket object, assigning event handlers, etc.). ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnGetSocket"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnGetThread", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnGetThread"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnThreadEnd", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnThreadEnd"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnThreadStart", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnThreadStart"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnStatusChange", "text": " client is granted administrative rights), after processing original event.<br> Paramaneter &quot;Self&quot; contains reference to client's endpoint socket object. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnStatusChange"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnPacketDrop", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnPacketDrop"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnOverflowClear", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnOverflowClear"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnPacketReceived", "text": " Called only when client endpoint socket object can receive passed packet.<br> Parameter &quot;Self&quot; contains reference to client's incoming stream. ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnPacketReceived"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnPacketSending", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnPacketSending"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnPacketSend", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnPacketSend"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnLog", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnLog"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnEventRegister", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnEventRegister"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnEventUnregister", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnEventUnregister"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnEvent", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnEvent"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnChannelRegister", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnChannelRegister"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnChannelUnregister", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnChannelUnregister"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnChannel", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnChannel"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnChannelBuffering", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnChannelBuffering"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnConfig", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnConfig"},
     {"title": "TelemetryNetServer.TTelemetryNetServer.OnDestroy", "text": " ", "tags": "", "loc": "TelemetryNetServer.TTelemetryNetServer.html#OnDestroy"},
     {"title": "TelemetryNetSockets", "text": "*******************************************************************************        <p><code>TelemetryNetSockets</code>    <p>©František Milt, all rights reserved.    <p>Classes in this unit (for details, refer to declaration of individual class): </p>    <pre class=\"preformatted\">    TTelemetryNetServerClientWinSocket(TNSCWinSocket)    TTelemetryNetClientWinSocket(TNCWinSocket)    TTelemetryNetClientSocket(TNClientSocket)    </pre>    <p> Last change: 2013-10-10    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-10 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryNetSockets.html"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket", "text": " It implements incoming and outgoing buffers and set of state flags used in communication. Each client connecting to the server spawns instance of this class and this object is then used for server-client communication and client management.    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.fCircularPacketsBuffer", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#fCircularPacketsBuffer"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.fIncomingStream", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#fIncomingStream"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.fUniqueIdentificator", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#fUniqueIdentificator"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.fWaitingForPassword", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#fWaitingForPassword"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.fReadyToWork", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#fReadyToWork"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.fAdminRights", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#fAdminRights"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.fSuperAdminRights", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#fSuperAdminRights"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.fOnStatusChange", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#fOnStatusChange"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.SetWaitingForPassword", "text": "    <p>  Value New value to be stored in <a class=\"normal\" href=\"TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#fWaitingForPassword\">fWaitingForPassword</a>.  ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#SetWaitingForPassword"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.SetReadyToWork", "text": "    <p>  Value New value to be stored in <a class=\"normal\" href=\"TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#fReadyToWork\">fReadyToWork</a>.  ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#SetReadyToWork"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.SetAdminRights", "text": "    <p>  Value New value to be stored in <a class=\"normal\" href=\"TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#fAdminRights\">fAdminRights</a>.  ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#SetAdminRights"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.SetSuperAdminRights", "text": "    <p>  Value New value to be stored in <a class=\"normal\" href=\"TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#fSuperAdminRights\">fSuperAdminRights</a>.  ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#SetSuperAdminRights"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.Create", "text": " Refer to constructor implementation for details.<br> For details about parent class and parameters of this method, refer to delphi help/documentation, TServerClientWinSocket class.    ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#Create"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.Destroy", "text": "    ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#Destroy"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.CanSendPacket", "text": " It depends on packet type and state of the client (e.g. it is is ready to work, has admin rights, etc.).<br> For detailed definitions, refer to method implementation.    <p>    <p>  Packet Packet for which we need to know if this socket can send it. <code>True</code> when socket can send given packet, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#CanSendPacket"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.CanReceivePacket", "text": " It depends on packet type and state of the client (e.g. it is is ready to work, has admin rights, etc.).<br> For detailed definitions, refer to method implementation.    <p>    <p>  Packet Packet for which we need to know if this socket can receive it. <code>True</code> when socket can receive given packet, <code>False</code> otherwise. ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#CanReceivePacket"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.CircularPacketsBuffer", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#CircularPacketsBuffer"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.IncomingStream", "text": " Use this object event OnPacket to actually receive packets. ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#IncomingStream"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.UniqueIdentificator", "text": " It is automatically generated in constructor. ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#UniqueIdentificator"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.WaitingForPassword", "text": " <code>False</code> means it has logged successfuly.<br> When set to different value then it already has, <a class=\"normal\" href=\"TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#OnStatusChange\">OnStatusChange</a> event is called. ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#WaitingForPassword"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.ReadyToWork", "text": " It is set to <code>True</code> only after client sends ready packet - meaning client decides whether it is ready, not the server.<br> When set to different value then it already has, <a class=\"normal\" href=\"TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#OnStatusChange\">OnStatusChange</a> event is called. ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#ReadyToWork"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.AdminRights", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#AdminRights"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.SuperAdminRights", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#SuperAdminRights"},
     {"title": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.OnStatusChange", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetServerClientWinSocket.html#OnStatusChange"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientWinSocket", "text": " It replaces original socket of class TClientWinSocket, because there is no way to implement needed buffers into in.    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientWinSocket.html"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientWinSocket.fCircularPacketsBuffer", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientWinSocket.html#fCircularPacketsBuffer"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientWinSocket.fIncomingStream", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientWinSocket.html#fIncomingStream"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientWinSocket.Create", "text": "    ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientWinSocket.html#Create"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientWinSocket.Destroy", "text": "    ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientWinSocket.html#Destroy"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientWinSocket.CircularPacketsBuffer", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientWinSocket.html#CircularPacketsBuffer"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientWinSocket.IncomingStream", "text": " Use this object event OnPacket to actually receive packets. ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientWinSocket.html#IncomingStream"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket", "text": " This class is implemented in the same way as TClientSocket in Delphi 7, only differnce is, it uses <a class=\"normal\" href=\"TelemetryNetSockets.TTelemetryNetClientWinSocket.html\">TTelemetryNetClientWinSocket</a> as endpoint socket instead of TClientWinSocket - because <a class=\"normal\" href=\"TelemetryNetSockets.TTelemetryNetClientWinSocket.html\">TTelemetryNetClientWinSocket</a> implements buffers used during communication. There is currently no other method how to force use of <a class=\"normal\" href=\"TelemetryNetSockets.TTelemetryNetClientWinSocket.html\">TTelemetryNetClientWinSocket</a> other than completely reimplementing the client socket.    <p>For members description, refer to delphi help/documentation. ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.fClientSocket", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#fClientSocket"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.DoActivate", "text": "    ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#DoActivate"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.GetClientType", "text": "    ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#GetClientType"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.SetClientType", "text": "    ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#SetClientType"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.Create", "text": "    ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#Create"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.Destroy", "text": "    ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#Destroy"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.Socket", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#Socket"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.Active", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#Active"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.Address", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#Address"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.ClientType", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#ClientType"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.Host", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#Host"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.Port", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#Port"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.Service", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#Service"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.OnLookup", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#OnLookup"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.OnConnecting", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#OnConnecting"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.OnConnect", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#OnConnect"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.OnDisconnect", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#OnDisconnect"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.OnRead", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#OnRead"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.OnWrite", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#OnWrite"},
     {"title": "TelemetryNetSockets.TTelemetryNetClientSocket.OnError", "text": " ", "tags": "", "loc": "TelemetryNetSockets.TTelemetryNetClientSocket.html#OnError"},
     {"title": "TelemetryNetSockets.TNSCWinSocket", "text": " ", "tags": "", "loc": "TelemetryNetSockets.html#TNSCWinSocket"},
     {"title": "TelemetryNetSockets.TNCWinSocket", "text": " ", "tags": "", "loc": "TelemetryNetSockets.html#TNCWinSocket"},
     {"title": "TelemetryNetSockets.TNClientSocket", "text": " ", "tags": "", "loc": "TelemetryNetSockets.html#TNClientSocket"},
     {"title": "TelemetryRecipient", "text": "*******************************************************************************        <p><code>TelemetryRecipient</code>    <p>©František Milt, all rights reserved.    <p>This unit contains <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html\">TTelemetryRecipient</a> class used to control the telmetry API (see class declaration for details).    <p>Last change: 2013-10-07    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-07 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryRecipient.html"},
     {"title": "TelemetryRecipient.TTelemetryRecipient", "text": "    <p>It provides methods for events and channels registration, unregistration and many others. It also provides object events that wraps API event and channel callbacks.<br> Before instance of this class is created, a check if it supports required telemetry and game version must be performed. For that purpose, it has class methods that can be called on class itself (before creating class instance). If required versions are not supported, do not create instance of this class!    <p><b>Note:</b> Because recipient internally creates instance of <a class=\"normal\" href=\"TelemetryInfoProvider.TTelemetryInfoProvider.html\">TTelemetryInfoProvider</a>, the provider must support required versions of telemetry and game as well.    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>These methods: </p>    <pre class=\"preformatted\">      HighestSupportedTelemetryVersion      SupportsTelemetryVersion      SupportsTelemetryMajorVersion      SupportsGameVersion      SupportsTelemetryAndGameVersion</pre>    <p> ...can and actually must be called directly on class. They should be used to check whether both this class and <a class=\"normal\" href=\"TelemetryInfoProvider.TTelemetryInfoProvider.html\">TTelemetryInfoProvider</a> class supports required telemetry and game version before instantiation (creation of class instance).    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fInfoProvider", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fInfoProvider"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fRegisteredEvents", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fRegisteredEvents"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fRegisteredChannels", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fRegisteredChannels"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fStoredConfigs", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fStoredConfigs"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fStoredChannelValues", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fStoredChannelValues"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fLastTelemetryResult", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fLastTelemetryResult"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fTelemetryVersion", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fTelemetryVersion"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fGameName", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fGameName"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fGameID", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fGameID"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fGameVersion", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fGameVersion"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fKeepUtilityEvents", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fKeepUtilityEvents"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fStoreConfigurations", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fStoreConfigurations"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fManageIndexedChannels", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fManageIndexedChannels"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fStoreChannelValues", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fStoreChannelValues"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.cbLog", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#cbLog"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.cbRegisterEvent", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#cbRegisterEvent"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.cbUnregisterEvent", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#cbUnregisterEvent"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.cbRegisterChannel", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#cbRegisterChannel"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.cbUnregisterChannel", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#cbUnregisterChannel"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fOnDestroy", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fOnDestroy"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fOnLog", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fOnLog"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fOnEventRegister", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fOnEventRegister"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fOnEventUnregister", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fOnEventUnregister"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fOnEvent", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fOnEvent"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fOnChannelRegister", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fOnChannelRegister"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fOnChannelUnregister", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fOnChannelUnregister"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fOnChannel", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fOnChannel"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.fOnConfig", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#fOnConfig"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.SetKeepUtilityEvents", "text": "    <p>  Value New value to be stored in <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#fKeepUtilityEvents\">fKeepUtilityEvents</a>.  ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#SetKeepUtilityEvents"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.SetStoreConfigurations", "text": "    <p>  Value New value to be stored in <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#fStoreConfigurations\">fStoreConfigurations</a>.  ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#SetStoreConfigurations"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.SetStoreChannelValues", "text": "    <p>  Value New value to be stored in <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#fStoreChannelValues\">fStoreChannelValues</a>.  ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#SetStoreChannelValues"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.EventHandler", "text": "    <p>   Event Telemetry event identification number. Data Pointer to data received alongside the telemetry event. Can be <code>Nil</code>.  ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#EventHandler"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.ChannelHandler", "text": "  Name Name of received telemetry channel. ID ID of received channel. Index Index of received channel. Value Pointer to actual value of received channel. Can be <code>Nil</code>.  ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#ChannelHandler"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.ProcessConfigurationEvent", "text": " It is called from <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#EventHandler\">EventHandler</a> method when configuration event is received and <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#StoreConfigurations\">StoreConfigurations</a> is set to <code>True</code>.<br> Received data are parsed and configuration informations are extracted and stored in <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#StoredConfigs\">StoredConfigs</a> list. <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#OnConfig\">OnConfig</a> event is called for every extracted config (after it is stored / its stored value changed).<br> When <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#ManageIndexedChannels\">ManageIndexedChannels</a> is set to <code>True</code>, then indexed channels are too managed in this method (refer to source code for details).    <p>  Data Pointer to structure holding actual configuration data. Must not be <code>Nil</code>.  ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#ProcessConfigurationEvent"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.PrepareForTelemetryVersion", "text": "    <p>    <p>  aTelemetryVersion Version of telemetry for which the object should be prepared. <code>True</code> when preparation for given version were done successfully, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#PrepareForTelemetryVersion"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.PrepareForGameVersion", "text": "    <p>      <p>  aGameName Name of the game. aGameID Game identificator. aGameVersion Version of game. <code>True</code> when preparation for given game and its version were done successfully, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#PrepareForGameVersion"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.HighestSupportedTelemetryVersion", "text": "   Highest supported telemetry version. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#HighestSupportedTelemetryVersion"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.SupportsTelemetryVersion", "text": "  aTelemetryVersion Version of telemetry. <code>True</code> when given telemetry version is supported, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#SupportsTelemetryVersion"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.SupportsTelemetryMajorVersion", "text": "  aTelemetryVersion Version of telemetry. <code>True</code> when given telemetry major version is supported (minor part is ignored), otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#SupportsTelemetryMajorVersion"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.SupportsGameVersion", "text": "  aGameID Game identificator. aGameVersion Version of game. <code>True</code> when given game and its version are supported, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#SupportsGameVersion"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.SupportsTelemetryAndGameVersion", "text": "  aTelemetryVersion Version of telemetry. aGameID Game identificator. aGameVersion Version of game. <code>True</code> when given telemetry, game and its version are supported, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#SupportsTelemetryAndGameVersion"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.SupportsTelemetryAndGameVersionParam", "text": "  aTelemetryVersion Version of telemetry. aParameters Structure containing other version informations. <code>True</code> when given telemetry, game and its version are supported, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#SupportsTelemetryAndGameVersionParam"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.Create", "text": "    <p>   aTelemetryVersion Version of telemetry for which the object should prepare. Parameters Structure containing other parameters used in constructor (callbacks pointers, game version, etc.).  ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#Create"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.Destroy", "text": "    ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#Destroy"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.SetGameCallbacks", "text": "    <p>  Parameters Structure provided by telemetry API that contains all necessary callback pointers.  ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#SetGameCallbacks"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.SetGameCallback", "text": "    <p><b>Warning!</b> - CallbackFunction pointer is not checked for actual type.    <p>   Callback Indicates to which callback assign given function pointer from second parameter. CallbackFunction Pointer to be assigned.  ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#SetGameCallback"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.Log", "text": "    <p>   LogType Type of message (i.e. if it is error, warning or normal message). LogText Actual message text.  ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#Log"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.Log", "text": " Message will be written as normal text (LogType set to SCS_LOG_TYPE_message).<br> Works only when <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#cbLog\">cbLog</a> callback is assigned.    <p>  LogText Actual message text.  ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#Log"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.EventRegistered", "text": "    <p>    <p>  Event Event to be checked. <code>True</code> when given event is found in list, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#EventRegistered"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.EventRegister", "text": "    <p>    <p>  Event Event to be registered. <code>True</code> when registration was successful, otherwise <code>False</code> (property <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#LastTelemetryResult\">LastTelemetryResult</a> contains result code). ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#EventRegister"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.EventUnregister", "text": " Works only when <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#cbUnregisterEvent\">cbUnregisterEvent</a> callback is assigned, when it is not, function returns false and <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#LastTelemetryResult\">LastTelemetryResult</a> is set to SCS_RESULT_generic_error.    <p>    <p>  Event Event to be unregistered. <code>True</code> when unregistration was successful, otherwise <code>False</code> (property <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#LastTelemetryResult\">LastTelemetryResult</a> contains result code). ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#EventUnregister"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.EventRegisterAll", "text": "    <p>   Number of successfully registered events. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#EventRegisterAll"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.EventUnregisterAll", "text": "    <p>   Number of successfully unregistered events. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#EventUnregisterAll"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.EventGetDataAsString", "text": " for displaying to user). If no data can be converted to text, only name of avent is returned. When TypeName is set to true, all values are marked with type identifiers.    <p>      <p>  Event Type of event that is converted to text. Data Data for given event. Can be <code>Nil</code>. TypeName Indicating whether type identifiers should be included in resulting text. Textual representation of event (event name) and its data. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#EventGetDataAsString"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.ChannelRegistered", "text": "    <p>      <p>  Name Name of channel to be checked. Index Index of channel. ValueType Value type of checked channel. <code>True</code> when given channel is found in list, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#ChannelRegistered"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.ChannelRegister", "text": "    <p>       <p>  Name Name registered channel. Index Index of registered channel. ValueType Value type of registered channel. Flags Registration flags. <code>True</code> when registration was successful, otherwise <code>False</code> (property <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#LastTelemetryResult\">LastTelemetryResult</a> contains result code). ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#ChannelRegister"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.ChannelUnregister", "text": " Works only when <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#cbUnregisterChannel\">cbUnregisterChannel</a> callback is assigned, when it is not, function returns false and <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#LastTelemetryResult\">LastTelemetryResult</a> is set to SCS_RESULT_generic_error.    <p>      <p>  Name Name of channel to be unregistered. Index Index of channel. ValueType Value type of channel. <code>True</code> when unregistration was successful, otherwise <code>False</code> (property <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#LastTelemetryResult\">LastTelemetryResult</a> contains result code). ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#ChannelUnregister"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.ChannelRegisterAll", "text": " When <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#ManageIndexedChannels\">ManageIndexedChannels</a> and <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#StoreConfigurations\">StoreConfigurations</a> properties are both set to <code>True</code>, then top index for indexed channel registration is taken from appropriate stored configuration value.<br> Set RegPrimaryTypes, RegSecondaryTypes and RegTertiaryTypes to true to register respective channel value type. If all three parameters are set to false, the method executes but nothing is registered.    <p>      <p>  RegPrimaryTypes Register primary value type. RegSecondaryTypes Register secondary value type. RegTertiaryTypes Register tertiary value type. Number of successfully registered channels. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#ChannelRegisterAll"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.ChannelUnregisterAll", "text": "    <p>   Number of successfully unregistered channels. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#ChannelUnregisterAll"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.ChannelGetValueAsString", "text": " When TypeName is set to true, all values are marked with type identifiers.    <p>     <p>  Value Pointer to actual channel value. Can be <code>Nil</code>. TypeName Indicating whether type identifiers should be included in resulting text. Textual representation of channel value, an empty string when value is not assigned. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#ChannelGetValueAsString"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.ConfigStored", "text": "    <p>     <p>  Name Name of checked configuration. Index Index of checked configuration. <code>True</code> when given config is found in list, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#ConfigStored"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.ChannelStored", "text": "    <p>      <p>  Name Name of checked channel. Index Index of checked channel. ValueType Value type of checked channel. <code>True</code> when given channel is found in list, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#ChannelStored"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.TelemetryInfoProvider", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#TelemetryInfoProvider"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.RegisteredEvents", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#RegisteredEvents"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.RegisteredChannels", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#RegisteredChannels"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.StoredConfigs", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#StoredConfigs"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.StoredChannelValues", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#StoredChannelValues"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.LastTelemetryResult", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#LastTelemetryResult"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.TelemetryVersion", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#TelemetryVersion"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.GameName", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#GameName"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.GameID", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#GameID"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.GameVersion", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#GameVersion"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.KeepUtilityEvents", "text": " If no event would be registered, then such call will not occur, rendering recipient unresponsive.<br> Initialized to <code>True</code>. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#KeepUtilityEvents"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.StoreConfigurations", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#StoreConfigurations"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.ManageIndexedChannels", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#ManageIndexedChannels"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.StoreChannelValues", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#StoreChannelValues"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.OnDestroy", "text": " It is called AFTER all registered channels and events are unregistered and <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html#KeepUtilityEvents\">KeepUtilityEvents</a> is set to <code>False</code>. ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#OnDestroy"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.OnLog", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#OnLog"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.OnEventRegister", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#OnEventRegister"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.OnEventUnregister", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#OnEventUnregister"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.OnEvent", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#OnEvent"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.OnChannelRegister", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#OnChannelRegister"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.OnChannelUnregister", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#OnChannelUnregister"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.OnChannel", "text": "    <p><b>Warning!</b> - this event can be called quite often (usually many times per frame). ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#OnChannel"},
     {"title": "TelemetryRecipient.TTelemetryRecipient.OnConfig", "text": " ", "tags": "", "loc": "TelemetryRecipient.TTelemetryRecipient.html#OnConfig"},
     {"title": "TelemetryRecipient.TGameCallback", "text": "  gcbLog    gcbEventReg    gcbEventUnreg    gcbChannelReg    gcbChannelUnreg   ", "tags": "", "loc": "TelemetryRecipient.html#TGameCallback"},
     {"title": "TelemetryRecipient.TLogEvent", "text": "    ", "tags": "", "loc": "TelemetryRecipient.html#TLogEvent"},
     {"title": "TelemetryRecipient.TEventRegisterEvent", "text": "    ", "tags": "", "loc": "TelemetryRecipient.html#TEventRegisterEvent"},
     {"title": "TelemetryRecipient.TEventEvent", "text": "    ", "tags": "", "loc": "TelemetryRecipient.html#TEventEvent"},
     {"title": "TelemetryRecipient.TChannelRegisterEvent", "text": "    ", "tags": "", "loc": "TelemetryRecipient.html#TChannelRegisterEvent"},
     {"title": "TelemetryRecipient.TChannelUnregisterEvent", "text": "    ", "tags": "", "loc": "TelemetryRecipient.html#TChannelUnregisterEvent"},
     {"title": "TelemetryRecipient.TChannelEvent", "text": "    ", "tags": "", "loc": "TelemetryRecipient.html#TChannelEvent"},
     {"title": "TelemetryRecipient.TConfigEvent", "text": "    ", "tags": "", "loc": "TelemetryRecipient.html#TConfigEvent"},
     {"title": "TelemetryRecipientAux", "text": "*******************************************************************************        <p><code>TelemetryRecipientAux</code>    <p>©František Milt, all rights reserved.    <p>This unit contains auxiliary functions used by <a class=\"normal\" href=\"TelemetryRecipient.TTelemetryRecipient.html\">TTelemetryRecipient</a> class, but they can be used independently too.<br> Most of them (in fact, at the moment all of them) are intended to return human readable (i.e. textual representation) of binary data returned by game events and channels.    <p>Last change: 2013-10-08    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-08 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryRecipientAux.html"},
     {"title": "TelemetryRecipientAux.cSCSValueTypeIdentifiers", "text": " Index of each string corresponds to value type number this string is identifying. ", "tags": "", "loc": "TelemetryRecipientAux.html#cSCSValueTypeIdentifiers"},
     {"title": "TelemetryRecipientAux.SCSValueTypeToStr", "text": " Identifiers are not defined by the API, for details about naming individual types refer to function implementation.    <p>    <p>  SCSValueType Value type. Textual identifier of given value type. ", "tags": "", "loc": "TelemetryRecipientAux.html#SCSValueTypeToStr"},
     {"title": "TelemetryRecipientAux.SCSValueTypeFromStr", "text": " If identifier is not recognized, then SCS_VALUE_TYPE_INVALID is returned.<br> Function is case-insensitive.<br> Identifiers are not defined by the API, for details about naming individual types refer to function implementation.    <p>    <p>  Str Textual identifier of value type. Value type with name corresponding to passed textual identifier. ", "tags": "", "loc": "TelemetryRecipientAux.html#SCSValueTypeFromStr"},
     {"title": "TelemetryRecipientAux.SCSValueToStr", "text": " When type of the value is not known, an empty string is returned.    <p>      <p>  Value Actual value to be converted to text. TypeName When set, value type identifier is added to output string. ShowDescriptions When set, fileds descriptors are shown in component values. Textual representation of given value. ", "tags": "", "loc": "TelemetryRecipientAux.html#SCSValueToStr"},
     {"title": "TelemetryRecipientAux.SCSValueLocalizedToStr", "text": "    <p>      <p>  Value Actual value to be converted to text. TypeName When set, value type identifier is added to output string. ShowDescriptions When set, fileds descriptors are shown in component values. Textual representation of given value. ", "tags": "", "loc": "TelemetryRecipientAux.html#SCSValueLocalizedToStr"},
     {"title": "TelemetryRecipientAux.TelemetryEventFrameStartToStr", "text": "    <p>     <p>  Data Structure to be converted to text. TypeName When set, value type identifiers for individual fields are added to output string. Textual representation of given structure. ", "tags": "", "loc": "TelemetryRecipientAux.html#TelemetryEventFrameStartToStr"},
     {"title": "TelemetryRecipientAux.TelemetryEventConfigurationToStr", "text": "    <p>      <p>  Data Structure to be converted to text. TypeName When set, value type identifiers for individual attribute values are added to output. ShowDescriptions When set, fileds descriptors are shown in component values. Textual representation of given structure. ", "tags": "", "loc": "TelemetryRecipientAux.html#TelemetryEventConfigurationToStr"},
     {"title": "TelemetryVersionObject", "text": "*******************************************************************************        <p><code>TelemetryVersionObject</code>    <p>©František Milt, all rights reserved.    <p>Classes in this unit (for details, refer to declaration of individual class): </p>    <pre class=\"preformatted\">    TTelemetryAbstractVersionObject     |- TTelemetryVersionObject         |- TTelemetryVersionPrepareObject  </pre>    <p>    <p>Last change: 2013-10-17    <p>Change List:</p>    <ul class=\"paragraph_spacing\">    <li><p>2013-10-17 - First stable version.</p></li>  </ul>    <p>    <p>******************************************************************************* František Milt <fmilt@seznam.cz>  ", "tags": "", "loc": "TelemetryVersionObject.html"},
     {"title": "TelemetryVersionObject.TTelemetryAbstractVersionObject", "text": " They should be used to check whether the class supports required telemetry and game version before instantiation (creation of class instance).    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryAbstractVersionObject.html"},
     {"title": "TelemetryVersionObject.TTelemetryAbstractVersionObject.HighestSupportedTelemetryVersion", "text": "   Highest supported telemetry version. ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryAbstractVersionObject.html#HighestSupportedTelemetryVersion"},
     {"title": "TelemetryVersionObject.TTelemetryAbstractVersionObject.SupportsTelemetryVersion", "text": "  TelemetryVersion Version of telemetry. <code>True</code> when given telemetry version is supported, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryAbstractVersionObject.html#SupportsTelemetryVersion"},
     {"title": "TelemetryVersionObject.TTelemetryAbstractVersionObject.SupportsTelemetryMajorVersion", "text": "  aTelemetryVersion Version of telemetry. <code>True</code> when given telemetry major version is supported (minor part is ignored), otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryAbstractVersionObject.html#SupportsTelemetryMajorVersion"},
     {"title": "TelemetryVersionObject.TTelemetryAbstractVersionObject.SupportsGameVersion", "text": "  GameID Game identificator. GameVersion Version of game. <code>True</code> when given game and its version are supported, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryAbstractVersionObject.html#SupportsGameVersion"},
     {"title": "TelemetryVersionObject.TTelemetryAbstractVersionObject.SupportsTelemetryAndGameVersion", "text": "  TelemetryVersion Version of telemetry. GameID Game identificator. GameVersion Version of game. <code>True</code> when given telemetry, game and its version are supported, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryAbstractVersionObject.html#SupportsTelemetryAndGameVersion"},
     {"title": "TelemetryVersionObject.TTelemetryAbstractVersionObject.SupportsTelemetryAndGameVersionParam", "text": "  aTelemetryVersion Version of telemetry. aParameters Structure containing other version informations. <code>True</code> when given telemetry, game and its version are supported, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryAbstractVersionObject.html#SupportsTelemetryAndGameVersionParam"},
     {"title": "TelemetryVersionObject.TTelemetryVersionObject", "text": " ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionObject.html"},
     {"title": "TelemetryVersionObject.TTelemetryVersionObject.HighestSupportedTelemetryVersion", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionObject.html#HighestSupportedTelemetryVersion"},
     {"title": "TelemetryVersionObject.TTelemetryVersionObject.SupportsTelemetryVersion", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionObject.html#SupportsTelemetryVersion"},
     {"title": "TelemetryVersionObject.TTelemetryVersionObject.SupportsTelemetryMajorVersion", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionObject.html#SupportsTelemetryMajorVersion"},
     {"title": "TelemetryVersionObject.TTelemetryVersionObject.SupportsGameVersion", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionObject.html#SupportsGameVersion"},
     {"title": "TelemetryVersionObject.TTelemetryVersionObject.SupportsTelemetryAndGameVersion", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionObject.html#SupportsTelemetryAndGameVersion"},
     {"title": "TelemetryVersionObject.TTelemetryVersionObject.SupportsTelemetryAndGameVersionParam", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionObject.html#SupportsTelemetryAndGameVersionParam"},
     {"title": "TelemetryVersionObject.TTelemetryVersionPrepareObject", "text": " For each version, all lower or equal version methods are called in ascending order (every method calls its predecessor at the beginning of its own code). For example, for version 1.2, methods 1_0, 1_1 and 1_2 would be called.<br> Lists of known items are filled inside these methods.<br>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p>    <p> ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionPrepareObject.html"},
     {"title": "TelemetryVersionObject.TTelemetryVersionPrepareObject.PrepareForTelemetryVersion", "text": "    <p>    <p>  TelemetryVersion Version of telemetry for which the object should be prepared. <code>True</code> when preparation for given version were done successfully, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionPrepareObject.html#PrepareForTelemetryVersion"},
     {"title": "TelemetryVersionObject.TTelemetryVersionPrepareObject.PrepareForGameVersion", "text": "    <p>     <p>  GameID Game identificator. GameVersion Version of game. <code>True</code> when preparation for given game and its version were done successfully, otherwise <code>False</code>. ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionPrepareObject.html#PrepareForGameVersion"},
     {"title": "TelemetryVersionObject.TTelemetryVersionPrepareObject.Prepare_Telemetry_1_0", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionPrepareObject.html#Prepare_Telemetry_1_0"},
     {"title": "TelemetryVersionObject.TTelemetryVersionPrepareObject.Prepare_Game_eut2_1_0", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionPrepareObject.html#Prepare_Game_eut2_1_0"},
     {"title": "TelemetryVersionObject.TTelemetryVersionPrepareObject.Prepare_Game_eut2_1_1", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionPrepareObject.html#Prepare_Game_eut2_1_1"},
     {"title": "TelemetryVersionObject.TTelemetryVersionPrepareObject.Prepare_Game_eut2_1_2", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionPrepareObject.html#Prepare_Game_eut2_1_2"},
     {"title": "TelemetryVersionObject.TTelemetryVersionPrepareObject.Prepare_Game_eut2_1_3", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionPrepareObject.html#Prepare_Game_eut2_1_3"},
     {"title": "TelemetryVersionObject.TTelemetryVersionPrepareObject.Prepare_Game_eut2_1_4", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionPrepareObject.html#Prepare_Game_eut2_1_4"},
     {"title": "TelemetryVersionObject.TTelemetryVersionPrepareObject.Prepare_Game_eut2_1_5", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionPrepareObject.html#Prepare_Game_eut2_1_5"},
     {"title": "TelemetryVersionObject.TTelemetryVersionPrepareObject.Prepare_Game_eut2_1_6", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionPrepareObject.html#Prepare_Game_eut2_1_6"},
     {"title": "TelemetryVersionObject.TTelemetryVersionPrepareObject.Prepare_Game_eut2_1_7", "text": "    ", "tags": "", "loc": "TelemetryVersionObject.TTelemetryVersionPrepareObject.html#Prepare_Game_eut2_1_7"}
]};
